# -*- coding: utf-8 -*-
"""
/***************************************************************************
 SpecifyDialog
                                 A QGIS plugin
 tool for clicking on feature
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2018-11-16
        git sha              : $Format:%H$
        copyright            : (C) 2018 by Jose
        email                : doe@doe.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from PyQt5 import uic
from PyQt5 import QtWidgets
from PyQt5.QtGui import QFont, QPixmap
from PyQt5.QtWidgets import QCheckBox, QLineEdit, QHBoxLayout, QFileDialog, QLabel, QPushButton, QMessageBox, QFrame

from PyQt5.QtCore import QRect, Qt, QFile




class SpecifyDialog(QtWidgets.QDialog):
    def __init__(self, parent=None):
        """Constructor."""
        super(SpecifyDialog, self).__init__(parent)
        #self.setupUi(self)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        #self.setupUi(self)
        p = self.palette()
        p.setColor(self.backgroundRole(), Qt.white)
        self.setPalette(p)
        self.resize(800,750)

        # attributes
        self.filename = None

    def showDialog(self, layer, columnList, fonafifoUrl):
        self.layer = layer;
        self.columnList = columnList

        MAX_FOOTER = 680

        X_INITIAL = 10

        HEIGHT=30
        WIDTH_LABEL=150
        WIDTH_INPUT=50
        X=X_INITIAL
        Y=70

        ####################################################################################
        # Riqueza de especies en registros de presencia
        ####################################################################################

        # FONAFIFO logo
        pic = QLabel(self)
        pic.setGeometry(600, MAX_FOOTER - 30, 150, 50)
        pixmap = QPixmap()
        pixmap.load(fonafifoUrl);
        pic.setPixmap(pixmap)

        self.labelHeader = QLabel(self)
        self.labelHeader.setText("Busqueda por criterios")
        self.labelHeader.setStyleSheet('color: #076F00')
        self.labelHeader.move(10, 20)
        newfont = QFont("Times", 20, QFont.Bold)
        self.labelHeader.setFont(newfont)

        self.frame = QFrame(self)
        self.frame.setFrameShape(QFrame.HLine)
        self.frame.setFrameShadow(QFrame.Sunken)
        self.frame.move(5,55);
        self.frame.resize(1955,5)


        label_presencia_especies = QLabel("Riqueza de especies en registros de presencia", self)
        label_presencia_especies.move(X,Y)
        label_presencia_especies.setStyleSheet('color: #0A9000')
        newfont = QFont("Times", 10, QFont.Bold)
        label_presencia_especies.setFont(newfont)

        label_presencia_especies_MIN = QLabel("MIN", self)
        label_presencia_especies_MIN.move(X+610,Y+15)
        newfont = QFont("Times", 8, QFont.Bold)
        label_presencia_especies_MIN.setFont(newfont)
        label_presencia_especies_MIN.setStyleSheet('color: #0A9000')

        label_presencia_especies_MAX = QLabel("MAX", self)
        label_presencia_especies_MAX.move(X+670,Y+15)
        newfont = QFont("Times", 8, QFont.Bold)
        label_presencia_especies_MAX.setFont(newfont)
        label_presencia_especies_MAX.setStyleSheet('color: #0A9000')


        X=X_INITIAL
        Y+=HEIGHT+10

        self.checkbox_presencia_total_especies = QCheckBox("Riqueza total de especies", self)
        self.checkbox_presencia_total_especies.setGeometry(X,Y,WIDTH_LABEL+50,HEIGHT)
        X += WIDTH_LABEL + 50
        self.checkbox_presencia_total_especies_amenazadas = QCheckBox("Amenazadas UICN", self)
        self.checkbox_presencia_total_especies_amenazadas.setGeometry(X,Y,WIDTH_LABEL+50,HEIGHT)
        X += WIDTH_LABEL + 50
        self.checkbox_presencia_total_especies_amenazadas_lcvs = QCheckBox("Amenazadas LCVS", self)
        self.checkbox_presencia_total_especies_amenazadas_lcvs.setGeometry(X,Y,WIDTH_LABEL+50,HEIGHT)
        X += WIDTH_LABEL + 50
        self.textedit_presencia_total_especies_min = QLineEdit(self)
        self.textedit_presencia_total_especies_min.setGeometry(X,Y,WIDTH_INPUT,HEIGHT)
        X += WIDTH_INPUT + 10
        self.textedit_presencia_total_especies_max = QLineEdit(self)
        self.textedit_presencia_total_especies_max.setGeometry(X,Y,WIDTH_INPUT,HEIGHT)

        Y+=HEIGHT+10
        X=X_INITIAL

        self.checkbox_presencia_total_mammalia = QCheckBox("Riqueza total de MAMMALIA", self)
        self.checkbox_presencia_total_mammalia.setGeometry(X,Y,WIDTH_LABEL+50,HEIGHT)
        X += WIDTH_LABEL + 50
        self.checkbox_presencia_total_mammalia_amenazadas = QCheckBox("Amenazadas UICN", self)
        self.checkbox_presencia_total_mammalia_amenazadas.setGeometry(X,Y,WIDTH_LABEL+50,HEIGHT)
        X += WIDTH_LABEL + 50
        self.checkbox_presencia_total_mammalia_amenazadas_lcvs = QCheckBox("Amenazadas LCVS", self)
        self.checkbox_presencia_total_mammalia_amenazadas_lcvs.setGeometry(X,Y,WIDTH_LABEL+50,HEIGHT)
        X += WIDTH_LABEL + 50
        self.textedit_presencia_total_mammalia_min = QLineEdit(self)
        self.textedit_presencia_total_mammalia_min.setGeometry(X,Y,WIDTH_INPUT,HEIGHT)
        X += WIDTH_INPUT + 10
        self.textedit_presencia_total_mammalia_max = QLineEdit(self)
        self.textedit_presencia_total_mammalia_max.setGeometry(X,Y,WIDTH_INPUT,HEIGHT)

        Y+=HEIGHT+10
        X=X_INITIAL

        self.checkbox_presencia_total_aves = QCheckBox("Riqueza total de AVES", self)
        self.checkbox_presencia_total_aves.setGeometry(X,Y,WIDTH_LABEL+50,HEIGHT)
        X += WIDTH_LABEL + 50
        self.checkbox_presencia_total_aves_amenazadas = QCheckBox("Amenazadas UICN", self)
        self.checkbox_presencia_total_aves_amenazadas.setGeometry(X,Y,WIDTH_LABEL+50,HEIGHT)
        X += WIDTH_LABEL + 50
        self.checkbox_presencia_total_aves_amenazadas_lcvs = QCheckBox("Amenazadas LCVS", self)
        self.checkbox_presencia_total_aves_amenazadas_lcvs.setGeometry(X,Y,WIDTH_LABEL+50,HEIGHT)
        X += WIDTH_LABEL + 50
        self.textedit_presencia_total_aves_min = QLineEdit(self)
        self.textedit_presencia_total_aves_min.setGeometry(X,Y,WIDTH_INPUT,HEIGHT)
        X += WIDTH_INPUT + 10
        self.textedit_presencia_total_aves_max = QLineEdit(self)
        self.textedit_presencia_total_aves_max.setGeometry(X,Y,WIDTH_INPUT,HEIGHT)

        Y+=HEIGHT+10
        X=X_INITIAL

        self.checkbox_presencia_total_reptilia = QCheckBox("Riqueza total de REPTILIA", self)
        self.checkbox_presencia_total_reptilia.setGeometry(X,Y,WIDTH_LABEL+50,HEIGHT)
        X += WIDTH_LABEL + 50
        self.checkbox_presencia_total_reptilia_amenazadas = QCheckBox("Amenazadas UICN", self)
        self.checkbox_presencia_total_reptilia_amenazadas.setGeometry(X,Y,WIDTH_LABEL+50,HEIGHT)
        X += WIDTH_LABEL + 50
        self.checkbox_presencia_total_reptilia_amenazadas_lcvs = QCheckBox("Amenazadas LCVS", self)
        self.checkbox_presencia_total_reptilia_amenazadas_lcvs.setGeometry(X,Y,WIDTH_LABEL+50,HEIGHT)
        X += WIDTH_LABEL + 50
        self.textedit_presencia_total_reptilia_min = QLineEdit(self)
        self.textedit_presencia_total_reptilia_min.setGeometry(X,Y,WIDTH_INPUT,HEIGHT)
        X += WIDTH_INPUT + 10
        self.textedit_presencia_total_reptilia_max = QLineEdit(self)
        self.textedit_presencia_total_reptilia_max.setGeometry(X,Y,WIDTH_INPUT,HEIGHT)

        Y+=HEIGHT+10
        X=X_INITIAL

        self.checkbox_presencia_total_amphibia = QCheckBox("Riqueza total de AMPHIBIA", self)
        self.checkbox_presencia_total_amphibia.setGeometry(X,Y,WIDTH_LABEL+50,HEIGHT)
        X += WIDTH_LABEL + 50
        self.checkbox_presencia_total_amphibia_amenazadas = QCheckBox("Amenazadas UICN", self)
        self.checkbox_presencia_total_amphibia_amenazadas.setGeometry(X,Y,WIDTH_LABEL+50,HEIGHT)
        X += WIDTH_LABEL + 50
        self.checkbox_presencia_total_amphibia_amenazadas_lcvs = QCheckBox("Amenazadas LCVS", self)
        self.checkbox_presencia_total_amphibia_amenazadas_lcvs.setGeometry(X,Y,WIDTH_LABEL+50,HEIGHT)
        X += WIDTH_LABEL + 50
        self.textedit_presencia_total_amphibia_min = QLineEdit(self)
        self.textedit_presencia_total_amphibia_min.setGeometry(X,Y,WIDTH_INPUT,HEIGHT)
        X += WIDTH_INPUT + 10
        self.textedit_presencia_total_amphibia_max = QLineEdit(self)
        self.textedit_presencia_total_amphibia_max.setGeometry(X,Y,WIDTH_INPUT,HEIGHT)

        Y+=HEIGHT+10
        X=X_INITIAL

        self.checkbox_presencia_total_trees = QCheckBox("Riqueza total de PLANTAE", self)
        self.checkbox_presencia_total_trees.setGeometry(X,Y,WIDTH_LABEL+50,HEIGHT)
        X += WIDTH_LABEL + 50
        self.checkbox_presencia_total_trees_amenazadas = QCheckBox("Amenazadas UICN", self)
        self.checkbox_presencia_total_trees_amenazadas.setGeometry(X,Y,WIDTH_LABEL+50,HEIGHT)
        X += WIDTH_LABEL + 50
        self.checkbox_presencia_total_trees_amenazadas_lcvs = QCheckBox("Amenazadas LCVS", self)
        self.checkbox_presencia_total_trees_amenazadas_lcvs.setGeometry(X,Y,WIDTH_LABEL+50,HEIGHT)
        X += WIDTH_LABEL + 50
        self.textedit_presencia_total_trees_min = QLineEdit(self)
        self.textedit_presencia_total_trees_min.setGeometry(X,Y,WIDTH_INPUT,HEIGHT)
        X += WIDTH_INPUT + 10
        self.textedit_presencia_total_trees_max = QLineEdit(self)
        self.textedit_presencia_total_trees_max.setGeometry(X,Y,WIDTH_INPUT,HEIGHT)


        ####################################################################################
        # Riqueza de especies en areas de distribucion
        ####################################################################################

        X=X_INITIAL
        Y += HEIGHT + 20

        label_distribucion_especies = QLabel("Riqueza de especies por areas de distribucion", self)
        label_distribucion_especies.move(X,Y)
        newfont = QFont("Times", 10, QFont.Bold)
        label_distribucion_especies.setFont(newfont)
        label_distribucion_especies.setStyleSheet('color: #0A9000')

        label_distribucion_especies_MIN = QLabel("MIN", self)
        label_distribucion_especies_MIN.move(X+610,Y+15)
        newfont = QFont("Times", 8, QFont.Bold)
        label_distribucion_especies_MIN.setFont(newfont)
        label_distribucion_especies_MIN.setStyleSheet('color: #0A9000')

        label_distribucion_especies_MAX = QLabel("MAX", self)
        label_distribucion_especies_MAX.move(X+670,Y+15)
        newfont = QFont("Times", 8, QFont.Bold)
        label_distribucion_especies_MAX.setFont(newfont)
        label_distribucion_especies_MAX.setStyleSheet('color: #0A9000')

        X=X_INITIAL
        Y += HEIGHT + 20

        self.checkbox_distribucion_total_especies = QCheckBox("Riqueza total de especies", self)
        self.checkbox_distribucion_total_especies.setGeometry(X,Y,WIDTH_LABEL+50,HEIGHT)
        X += WIDTH_LABEL + 50
        self.checkbox_distribucion_total_especies_amenazadas = QCheckBox("Amenazadas UICN", self)
        self.checkbox_distribucion_total_especies_amenazadas.setGeometry(X,Y,WIDTH_LABEL+50,HEIGHT)
        X += WIDTH_LABEL + 50
        self.checkbox_distribucion_total_especies_amenazadas_lcvs = QCheckBox("Amenazadas LCVS", self)
        self.checkbox_distribucion_total_especies_amenazadas_lcvs.setGeometry(X,Y,WIDTH_LABEL+50,HEIGHT)
        X += WIDTH_LABEL + 50
        self.textedit_distribucion_total_especies_min = QLineEdit(self)
        self.textedit_distribucion_total_especies_min.setGeometry(X,Y,WIDTH_INPUT,HEIGHT)
        X += WIDTH_INPUT + 10
        self.textedit_distribucion_total_especies_max = QLineEdit(self)
        self.textedit_distribucion_total_especies_max.setGeometry(X,Y,WIDTH_INPUT,HEIGHT)

        Y+=HEIGHT+10
        X=X_INITIAL

        self.checkbox_distribucion_total_mammalia = QCheckBox("Riqueza total de MAMMALIA", self)
        self.checkbox_distribucion_total_mammalia.setGeometry(X,Y,WIDTH_LABEL+50,HEIGHT)
        X += WIDTH_LABEL + 50
        self.checkbox_distribucion_total_mammalia_amenazadas = QCheckBox("Amenazadas UICN", self)
        self.checkbox_distribucion_total_mammalia_amenazadas.setGeometry(X,Y,WIDTH_LABEL+50,HEIGHT)
        X += WIDTH_LABEL + 50
        self.checkbox_distribucion_total_mammalia_amenazadas_lcvs = QCheckBox("Amenazadas LCVS", self)
        self.checkbox_distribucion_total_mammalia_amenazadas_lcvs.setGeometry(X,Y,WIDTH_LABEL+50,HEIGHT)
        X += WIDTH_LABEL + 50
        self.textedit_distribucion_total_mammalia_min = QLineEdit(self)
        self.textedit_distribucion_total_mammalia_min.setGeometry(X,Y,WIDTH_INPUT,HEIGHT)
        X += WIDTH_INPUT + 10
        self.textedit_distribucion_total_mammalia_max = QLineEdit(self)
        self.textedit_distribucion_total_mammalia_max.setGeometry(X,Y,WIDTH_INPUT,HEIGHT)

        Y+=HEIGHT+10
        X=X_INITIAL

        self.checkbox_distribucion_total_aves = QCheckBox("Riqueza total de AVES", self)
        self.checkbox_distribucion_total_aves.setGeometry(X,Y,WIDTH_LABEL+50,HEIGHT)
        X += WIDTH_LABEL + 50
        self.checkbox_distribucion_total_aves_amenazadas = QCheckBox("Amenazadas UICN", self)
        self.checkbox_distribucion_total_aves_amenazadas.setGeometry(X,Y,WIDTH_LABEL+50,HEIGHT)
        X += WIDTH_LABEL + 50
        self.checkbox_distribucion_total_aves_amenazadas_lcvs = QCheckBox("Amenazadas LCVS", self)
        self.checkbox_distribucion_total_aves_amenazadas_lcvs.setGeometry(X,Y,WIDTH_LABEL+50,HEIGHT)
        X += WIDTH_LABEL + 50
        self.textedit_distribucion_total_aves_min = QLineEdit(self)
        self.textedit_distribucion_total_aves_min.setGeometry(X,Y,WIDTH_INPUT,HEIGHT)
        X += WIDTH_INPUT + 10
        self.textedit_distribucion_total_aves_max = QLineEdit(self)
        self.textedit_distribucion_total_aves_max.setGeometry(X,Y,WIDTH_INPUT,HEIGHT)

        Y+=HEIGHT+10
        X=X_INITIAL

        self.checkbox_distribucion_total_reptilia = QCheckBox("Riqueza total de REPTILIA", self)
        self.checkbox_distribucion_total_reptilia.setGeometry(X,Y,WIDTH_LABEL+50,HEIGHT)
        X += WIDTH_LABEL + 50
        self.checkbox_distribucion_total_reptilia_amenazadas = QCheckBox("Amenazadas UICN", self)
        self.checkbox_distribucion_total_reptilia_amenazadas.setGeometry(X,Y,WIDTH_LABEL+50,HEIGHT)
        X += WIDTH_LABEL + 50
        self.checkbox_distribucion_total_reptilia_amenazadas_lcvs = QCheckBox("Amenazadas LCVS", self)
        self.checkbox_distribucion_total_reptilia_amenazadas_lcvs.setGeometry(X,Y,WIDTH_LABEL+50,HEIGHT)
        X += WIDTH_LABEL + 50
        self.textedit_distribucion_total_reptilia_min = QLineEdit(self)
        self.textedit_distribucion_total_reptilia_min.setGeometry(X,Y,WIDTH_INPUT,HEIGHT)
        X += WIDTH_INPUT + 10
        self.textedit_distribucion_total_reptilia_max = QLineEdit(self)
        self.textedit_distribucion_total_reptilia_max.setGeometry(X,Y,WIDTH_INPUT,HEIGHT)

        Y+=HEIGHT+10
        X=X_INITIAL

        self.checkbox_distribucion_total_amphibia = QCheckBox("Riqueza total de AMPHIBIA", self)
        self.checkbox_distribucion_total_amphibia.setGeometry(X,Y,WIDTH_LABEL+50,HEIGHT)
        X += WIDTH_LABEL + 50
        self.checkbox_distribucion_total_amphibia_amenazadas = QCheckBox("Amenazadas UICN", self)
        self.checkbox_distribucion_total_amphibia_amenazadas.setGeometry(X,Y,WIDTH_LABEL+50,HEIGHT)
        X += WIDTH_LABEL + 50
        self.checkbox_distribucion_total_amphibia_amenazadas_lcvs = QCheckBox("Amenazadas LCVS", self)
        self.checkbox_distribucion_total_amphibia_amenazadas_lcvs.setGeometry(X,Y,WIDTH_LABEL+50,HEIGHT)
        X += WIDTH_LABEL + 50
        self.textedit_distribucion_total_amphibia_min = QLineEdit(self)
        self.textedit_distribucion_total_amphibia_min.setGeometry(X,Y,WIDTH_INPUT,HEIGHT)
        X += WIDTH_INPUT + 10
        self.textedit_distribucion_total_amphibia_max = QLineEdit(self)
        self.textedit_distribucion_total_amphibia_max.setGeometry(X,Y,WIDTH_INPUT,HEIGHT)

        Y+=HEIGHT+10
        X=X_INITIAL

        self.checkbox_distribucion_total_trees = QCheckBox("Riqueza total de PLANTAE", self)
        self.checkbox_distribucion_total_trees.setGeometry(X,Y,WIDTH_LABEL+50,HEIGHT)
        X += WIDTH_LABEL + 50
        self.checkbox_distribucion_total_trees_amenazadas = QCheckBox("Amenazadas UICN", self)
        self.checkbox_distribucion_total_trees_amenazadas.setGeometry(X,Y,WIDTH_LABEL+50,HEIGHT)
        X += WIDTH_LABEL + 50
        self.checkbox_distribucion_total_trees_amenazadas_lcvs = QCheckBox("Amenazadas LCVS", self)
        self.checkbox_distribucion_total_trees_amenazadas_lcvs.setGeometry(X,Y,WIDTH_LABEL+50,HEIGHT)
        X += WIDTH_LABEL + 50
        self.textedit_distribucion_total_trees_min = QLineEdit(self)
        self.textedit_distribucion_total_trees_min.setGeometry(X,Y,WIDTH_INPUT,HEIGHT)
        X += WIDTH_INPUT + 10
        self.textedit_distribucion_total_trees_max = QLineEdit(self)
        self.textedit_distribucion_total_trees_max.setGeometry(X,Y,WIDTH_INPUT,HEIGHT)

        Y = 600;
        X = X_INITIAL

        buttonSeleccionar = QPushButton('Resaltar poligonos', self)
        buttonSeleccionar.move(X, MAX_FOOTER)
        buttonSeleccionar.resize(200, 30)
        buttonSeleccionar.clicked.connect(self.selectPolygons)

        X = X + 250;

        buttonCerrar = QPushButton('Cerrar', self)
        buttonCerrar.move(X, MAX_FOOTER)
        buttonCerrar.resize(200, 30)
        buttonCerrar.clicked.connect(self.close)


        #layout_horizontal = QHBoxLayout(self)
        #layout_horizontal.addWidget(checkbox_1)
        #layout_horizontal.addWidget(textedit_1)

        #self.setLayout(layout_horizontal)


        self.show()

    def selectPolygons(self):
        # limpiar los layers seleccionados previamente
        self.layer.removeSelection()        

        # validar los valores ingresados
        hayErrores = False
        hayRegistros = False

        textedit_presencia_total_especies_min = self.textedit_presencia_total_especies_min.text()
        textedit_presencia_total_especies_max = self.textedit_presencia_total_especies_max.text()
        textedit_presencia_total_mammalia_min = self.textedit_presencia_total_mammalia_min.text()
        textedit_presencia_total_mammalia_max = self.textedit_presencia_total_mammalia_max.text()
        textedit_presencia_total_aves_min = self.textedit_presencia_total_aves_min.text()
        textedit_presencia_total_aves_max = self.textedit_presencia_total_aves_max.text()
        textedit_presencia_total_reptilia_min = self.textedit_presencia_total_reptilia_min.text()
        textedit_presencia_total_reptilia_max = self.textedit_presencia_total_reptilia_max.text()
        textedit_presencia_total_amphibia_min = self.textedit_presencia_total_amphibia_min.text()
        textedit_presencia_total_amphibia_max = self.textedit_presencia_total_amphibia_max.text()
        textedit_presencia_total_trees_min = self.textedit_presencia_total_trees_min.text()
        textedit_presencia_total_trees_max = self.textedit_presencia_total_trees_max.text()

        textedit_distribucion_total_especies_min = self.textedit_distribucion_total_especies_min.text()
        textedit_distribucion_total_especies_max = self.textedit_distribucion_total_especies_max.text()
        textedit_distribucion_total_mammalia_min = self.textedit_distribucion_total_mammalia_min.text()
        textedit_distribucion_total_mammalia_max = self.textedit_distribucion_total_mammalia_max.text()
        textedit_distribucion_total_aves_min = self.textedit_distribucion_total_aves_min.text()
        textedit_distribucion_total_aves_max = self.textedit_distribucion_total_aves_max.text()
        textedit_distribucion_total_reptilia_min = self.textedit_distribucion_total_reptilia_min.text()
        textedit_distribucion_total_reptilia_max = self.textedit_distribucion_total_reptilia_max.text()
        textedit_distribucion_total_amphibia_min = self.textedit_distribucion_total_amphibia_min.text()
        textedit_distribucion_total_amphibia_max = self.textedit_distribucion_total_amphibia_max.text()
        textedit_distribucion_total_trees_min = self.textedit_distribucion_total_trees_min.text()
        textedit_distribucion_total_trees_max = self.textedit_distribucion_total_trees_max.text()

        ###############################################################################
        ### VALIDACIONES
        ###############################################################################
        if self.checkbox_presencia_total_especies.isChecked():
            if not textedit_presencia_total_especies_min.isdigit():
               QMessageBox.about(self, 'Alerta!', 'Valor no numerico en la presencia total de especies (MIN)')
               hayErrores = True
            if not textedit_presencia_total_especies_max.isdigit():
                QMessageBox.about(self, 'Alerta!', 'Valor no numerico en la presencia total de especies (MAX)')
                hayErrores = True
        if self.checkbox_presencia_total_mammalia.isChecked():
            if not textedit_presencia_total_mammalia_min.isdigit():
               QMessageBox.about(self, 'Alerta!', 'Valor no numerico en la presencia total de Mammalia (MIN)')
               hayErrores = True
            if not textedit_presencia_total_mammalia_max.isdigit():
                QMessageBox.about(self, 'Alerta!', 'Valor no numerico en la presencia total de Mammalia (MAX)')
                hayErrores = True
        if self.checkbox_presencia_total_aves.isChecked():
            if not textedit_presencia_total_aves_min.isdigit():
               QMessageBox.about(self, 'Alerta!', 'Valor no numerico en la presencia total de Aves (MIN)')
               hayErrores = True
            if not textedit_presencia_total_aves_max.isdigit():
                QMessageBox.about(self, 'Alerta!', 'Valor no numerico en la presencia total de Aves (MAX)')
                hayErrores = True
        if self.checkbox_presencia_total_reptilia.isChecked():
            if not textedit_presencia_total_reptilia_min.isdigit():
               QMessageBox.about(self, 'Alerta!', 'Valor no numerico en la presencia total de Reptilia (MIN)')
               hayErrores = True
            if not textedit_presencia_total_reptilia_max.isdigit():
                QMessageBox.about(self, 'Alerta!', 'Valor no numerico en la presencia total de Reptilia (MAX)')
                hayErrores = True
        if self.checkbox_presencia_total_amphibia.isChecked():
            if not textedit_presencia_total_amphibia_min.isdigit():
               QMessageBox.about(self, 'Alerta!', 'Valor no numerico en la presencia total de Amphibia (MIN)')
               hayErrores = True
            if not textedit_presencia_total_amphibia_max.isdigit():
                QMessageBox.about(self, 'Alerta!', 'Valor no numerico en la presencia total de Amphibia (MAX)')
                hayErrores = True
        if self.checkbox_presencia_total_trees.isChecked():
            if not textedit_presencia_total_trees_min.isdigit():
               QMessageBox.about(self, 'Alerta!', 'Valor no numerico en la presencia total de Plantae (MIN)')
               hayErrores = True
            if not textedit_presencia_total_trees_max.isdigit():
                QMessageBox.about(self, 'Alerta!', 'Valor no numerico en la presencia total de Plantae (MAX)')
                hayErrores = True

        if self.checkbox_distribucion_total_especies.isChecked():
            if not textedit_distribucion_total_especies_min.isdigit():
                QMessageBox.about(self, 'Alerta!', 'Valor no numerico en la riqueza por areas de distribucion (MIN)')
                hayErrores = True
            if not textedit_distribucion_total_especies_max.isdigit():
                QMessageBox.about(self, 'Alerta!', 'Valor no numerico en la riqueza por areas de distribucion (MAX)')
                hayErrores = True
        if self.checkbox_distribucion_total_mammalia.isChecked():
            if not textedit_distribucion_total_mammalia_min.isdigit():
               QMessageBox.about(self, 'Alerta!', 'Valor no numerico en la riqueza total de Mammalia - Areas de distribucion (MIN)')
               hayErrores = True
            if not textedit_distribucion_total_mammalia_max.isdigit():
                QMessageBox.about(self, 'Alerta!', 'Valor no numerico en la riqueza total de Mammalia - Areas de distribucion (MAX)')
                hayErrores = True
        if self.checkbox_distribucion_total_aves.isChecked():
            if not textedit_distribucion_total_aves_min.isdigit():
               QMessageBox.about(self, 'Alerta!', 'Valor no numerico en la riqueza total de Aves - Areas de distribucion (MIN)')
               hayErrores = True
            if not textedit_distribucion_total_aves_max.isdigit():
                QMessageBox.about(self, 'Alerta!', 'Valor no numerico en la riqueza total de Aves - Areas de distribucion (MAX)')
                hayErrores = True
        if self.checkbox_distribucion_total_reptilia.isChecked():
            if not textedit_distribucion_total_reptilia_min.isdigit():
               QMessageBox.about(self, 'Alerta!', 'Valor no numerico en la riqueza total de Reptilia - Areas de distribucion (MIN)')
               hayErrores = True
            if not textedit_distribucion_total_reptilia_max.isdigit():
                QMessageBox.about(self, 'Alerta!', 'Valor no numerico en la riqueza total de Reptilia - Areas de distribucion (MAX)')
                hayErrores = True
        if self.checkbox_distribucion_total_amphibia.isChecked():
            if not textedit_distribucion_total_amphibia_min.isdigit():
               QMessageBox.about(self, 'Alerta!', 'Valor no numerico en la riqueza total de Amphibia - Areas de distribucion (MIN)')
               hayErrores = True
            if not textedit_distribucion_total_amphibia_max.isdigit():
                QMessageBox.about(self, 'Alerta!', 'Valor no numerico en la riqueza total de Amphibia - Areas de distribucion (MAX)')
                hayErrores = True
        if self.checkbox_distribucion_total_trees.isChecked():
            if not textedit_distribucion_total_trees_min.isdigit():
               QMessageBox.about(self, 'Alerta!', 'Valor no numerico en la riqueza total de Plantae - Areas de distribucion (MIN)')
               hayErrores = True
            if not textedit_distribucion_total_trees_max.isdigit():
                QMessageBox.about(self, 'Alerta!', 'Valor no numerico en la riqueza total de Plantae - Areas de distribucion (MAX)')
                hayErrores = True


        if(not hayErrores):
            for feature in self.layer.getFeatures():
                attrs = feature.attributes()

                ###############################################################################
                ### TOTAL ESPECIES POR REGISTROS DE PRESENCIA
                ###############################################################################
                # desplegar si usuario desea buscar por presencia total de especies
                if self.checkbox_presencia_total_especies.isChecked() & self.checkbox_presencia_total_especies_amenazadas.isChecked():
                    if (feature["spp_all_threatened_richness_occurrence"] >= int(textedit_presencia_total_especies_min)) \
                            & (feature["spp_all_threatened_richness_occurrence"] <= int(textedit_presencia_total_especies_max)):
                        self.layer.select(feature.id())
                        hayRegistros = True
                # por LCVS
                if self.checkbox_presencia_total_especies.isChecked() & self.checkbox_presencia_total_especies_amenazadas_lcvs.isChecked():
                    if (feature["spp_all_lcvs_richness_occurrence"] >= int(textedit_presencia_total_especies_min)) \
                            & (feature["spp_all_lcvs_richness_occurrence"] <= int(textedit_presencia_total_especies_max)):
                        self.layer.select(feature.id())
                        hayRegistros = True
                # o solamente por presencia
                elif self.checkbox_presencia_total_especies.isChecked():
                    if (feature["spp_all_richness_occurrence"] >= int(textedit_presencia_total_especies_min)) \
                            & (feature["spp_all_richness_occurrence"] <= int(textedit_presencia_total_especies_max)):
                        self.layer.select(feature.id())
                        hayRegistros = True

                ###############################################################################
                ### TOTAL MAMMALIA POR REGISTROS DE PRESENCIA
                ###############################################################################
                # desplegar si usuario desea buscar por presencia total de especies amenazadas
                if self.checkbox_presencia_total_mammalia.isChecked() & self.checkbox_presencia_total_mammalia_amenazadas.isChecked():
                    if (feature["spp_mammalia_threatened_richness_occurrence"] >= int(textedit_presencia_total_mammalia_min)) \
                            & (feature["spp_mammalia_threatened_richness_occurrence"] <= int(textedit_presencia_total_mammalia_max)):
                        self.layer.select(feature.id())
                        hayRegistros = True
                # por LCVS
                if self.checkbox_presencia_total_mammalia.isChecked() & self.checkbox_presencia_total_mammalia_amenazadas_lcvs.isChecked():
                    if (feature["spp_mammalia_lcvs_richness_occurrence"] >= int(textedit_presencia_total_mammalia_min)) \
                            & (feature["spp_mammalia_lcvs_richness_occurrence"] <= int(textedit_presencia_total_mammalia_max)):
                        self.layer.select(feature.id())
                        hayRegistros = True
                # o solamente por presencia
                elif self.checkbox_presencia_total_mammalia.isChecked():
                    if (feature["spp_mammalia_richness_occurrence"] >= int(textedit_presencia_total_mammalia_min)) \
                            & (feature["spp_mammalia_richness_occurrence"] <= int(textedit_presencia_total_mammalia_max)):
                        self.layer.select(feature.id())
                        hayRegistros = True

                ###############################################################################
                ### TOTAL AVES POR REGISTROS DE PRESENCIA
                ###############################################################################
                # desplegar si usuario desea buscar por presencia total de especies amenazadas
                if self.checkbox_presencia_total_aves.isChecked() & self.checkbox_presencia_total_aves_amenazadas.isChecked():
                    if (feature["spp_aves_threatened_richness_occurrence"] >= int(textedit_presencia_total_aves_min)) \
                            & (feature["spp_aves_threatened_richness_occurrence"] <= int(textedit_presencia_total_aves_max)):
                        self.layer.select(feature.id())
                        hayRegistros = True
                # por LCVS
                if self.checkbox_presencia_total_aves.isChecked() & self.checkbox_presencia_total_aves_amenazadas_lcvs.isChecked():
                    if (feature["spp_aves_lcvs_richness_occurrence"] >= int(textedit_presencia_total_aves_min)) \
                            & (feature["spp_aves_lcvs_richness_occurrence"] <= int(textedit_presencia_total_aves_max)):
                        self.layer.select(feature.id())
                        hayRegistros = True
                # o solamente por presencia
                elif self.checkbox_presencia_total_aves.isChecked():
                    if (feature["spp_aves_richness_occurrence"] >= int(textedit_presencia_total_aves_min)) \
                            & (feature["spp_aves_richness_occurrence"] <= int(textedit_presencia_total_aves_max)):
                        self.layer.select(feature.id())
                        hayRegistros = True

                ###############################################################################
                ### TOTAL REPTILIA POR REGISTROS DE PRESENCIA
                ###############################################################################
                # desplegar si usuario desea buscar por presencia total de especies amenazadas
                if self.checkbox_presencia_total_reptilia.isChecked() & self.checkbox_presencia_total_reptilia_amenazadas.isChecked():
                    if (feature["spp_reptilia_threatened_richness_occurrence"] >= int(textedit_presencia_total_reptilia_min)) \
                            & (feature["spp_reptilia_threatened_richness_occurrence"] <= int(textedit_presencia_total_reptilia_max)):
                        self.layer.select(feature.id())
                        hayRegistros = True
                # por LCVS
                if self.checkbox_presencia_total_reptilia.isChecked() & self.checkbox_presencia_total_reptilia_amenazadas_lcvs.isChecked():
                    if (feature["spp_reptilia_lcvs_richness_occurrence"] >= int(textedit_presencia_total_reptilia_min)) \
                            & (feature["spp_reptilia_lcvs_richness_occurrence"] <= int(textedit_presencia_total_reptilia_max)):
                        self.layer.select(feature.id())
                        hayRegistros = True
                # o solamente por presencia
                elif self.checkbox_presencia_total_reptilia.isChecked():
                    if (feature["spp_reptilia_richness_occurrence"] >= int(textedit_presencia_total_reptilia_min)) \
                            & (feature["spp_reptilia_richness_occurrence"] <= int(textedit_presencia_total_reptilia_max)):
                        self.layer.select(feature.id())
                        hayRegistros = True

                ###############################################################################
                ### TOTAL AMPHIBIA POR REGISTROS DE PRESENCIA
                ###############################################################################
                # desplegar si usuario desea buscar por presencia total de especies amenazadas
                if self.checkbox_presencia_total_amphibia.isChecked() & self.checkbox_presencia_total_amphibia_amenazadas.isChecked():
                    if (feature["spp_amphibia_threatened_richness_occurrence"] >= int(textedit_presencia_total_amphibia_min)) \
                            & (feature["spp_amphibia_threatened_richness_occurrence"] <= int(textedit_presencia_total_amphibia_max)):
                        self.layer.select(feature.id())
                        hayRegistros = True
                # por LCVS
                if self.checkbox_presencia_total_amphibia.isChecked() & self.checkbox_presencia_total_amphibia_amenazadas_lcvs.isChecked():
                    if (feature["spp_amphibia_lcvs_richness_occurrence"] >= int(textedit_presencia_total_amphibia_min)) \
                            & (feature["spp_amphibia_lcvs_richness_occurrence"] <= int(textedit_presencia_total_amphibia_max)):
                        self.layer.select(feature.id())
                        hayRegistros = True
                # o solamente por presencia
                elif self.checkbox_presencia_total_amphibia.isChecked():
                    if (feature["spp_amphibia_richness_occurrence"] >= int(textedit_presencia_total_amphibia_min)) \
                            & (feature["spp_amphibia_richness_occurrence"] <= int(textedit_presencia_total_amphibia_max)):
                        self.layer.select(feature.id())
                        hayRegistros = True

                ###############################################################################
                ### TOTAL ARBOLES POR REGISTROS DE PRESENCIA
                ###############################################################################
                # desplegar si usuario desea buscar por presencia total de especies amenazadas
                if self.checkbox_presencia_total_trees.isChecked() & self.checkbox_presencia_total_trees_amenazadas.isChecked():
                    if (feature["spp_trees_threatened_richness_occurrence"] >= int(textedit_presencia_total_trees_min)) \
                            & (feature["spp_trees_threatened_richness_occurrence"] <= int(textedit_presencia_total_trees_max)):
                        self.layer.select(feature.id())
                        hayRegistros = True
                # por LCVS
                if self.checkbox_presencia_total_trees.isChecked() & self.checkbox_presencia_total_trees_amenazadas_lcvs.isChecked():
                    if (feature["spp_trees_lcvs_richness_occurrence"] >= int(textedit_presencia_total_trees_min)) \
                            & (feature["spp_trees_lcvs_richness_occurrence"] <= int(textedit_presencia_total_trees_max)):
                        self.layer.select(feature.id())
                        hayRegistros = True
                # o solamente por presencia
                elif self.checkbox_presencia_total_trees.isChecked():
                    if (feature["spp_trees_richness_occurrence"] >= int(textedit_presencia_total_trees_min)) \
                            & (feature["spp_trees_richness_occurrence"] <= int(textedit_presencia_total_trees_max)):
                        self.layer.select(feature.id())
                        hayRegistros = True

                ###############################################################################
                ### TOTAL ESPECIES POR AREAS DE DISTRIBUCION
                ###############################################################################
                # desplegar si usuario desea buscar por presencia total de especies
                if self.checkbox_distribucion_total_especies.isChecked() & self.checkbox_distribucion_total_especies_amenazadas.isChecked():
                    if (feature["spp_all_threatened_richness_distribution"] >= int(textedit_distribucion_total_especies_min)) \
                            & (feature["spp_all_threatened_richness_distribution"] <= int(textedit_distribucion_total_especies_max)):
                        self.layer.select(feature.id())
                        hayRegistros = True
                # por LCVS
                if self.checkbox_distribucion_total_especies.isChecked() & self.checkbox_distribucion_total_especies_amenazadas_lcvs.isChecked():
                    if (feature["spp_all_lcvs_richness_distribution"] >= int(textedit_distribucion_total_especies_min)) \
                            & (feature["spp_all_lcvs_richness_distribution"] <= int(textedit_distribucion_total_especies_max)):
                        self.layer.select(feature.id())
                        hayRegistros = True
                # o solamente por presencia
                elif self.checkbox_distribucion_total_especies.isChecked():
                    if (feature["spp_all_richness_distribution"] >= int(textedit_distribucion_total_especies_min)) \
                            & (feature["spp_all_richness_distribution"] <= int(textedit_distribucion_total_especies_max)):
                        self.layer.select(feature.id())
                        hayRegistros = True

                ###############################################################################
                ### TOTAL MAMMALIA POR AREAS DE DISTRIBUCION
                ###############################################################################
                # desplegar si usuario desea buscar por presencia total de especies amenazadas
                if self.checkbox_distribucion_total_mammalia.isChecked() & self.checkbox_distribucion_total_mammalia_amenazadas.isChecked():
                    if (feature["spp_mammalia_threatened_richness_distribution"] >= int(textedit_distribucion_total_mammalia_min)) \
                            & (feature["spp_mammalia_threatened_richness_distribution"] <= int(textedit_distribucion_total_mammalia_max)):
                        self.layer.select(feature.id())
                        hayRegistros = True
                # por LCVS
                if self.checkbox_distribucion_total_mammalia.isChecked() & self.checkbox_distribucion_total_mammalia_amenazadas_lcvs.isChecked():
                    if (feature["spp_mammalia_lcvs_richness_distribution"] >= int(textedit_distribucion_total_mammalia_min)) \
                            & (feature["spp_mammalia_lcvs_richness_distribution"] <= int(textedit_distribucion_total_mammalia_max)):
                        self.layer.select(feature.id())
                        hayRegistros = True
                # o solamente por presencia
                elif self.checkbox_distribucion_total_mammalia.isChecked():
                    if (feature["spp_mammalia_richness_distribution"] >= int(textedit_distribucion_total_mammalia_min)) \
                            & (feature["spp_mammalia_richness_distribution"] <= int(textedit_distribucion_total_mammalia_max)):
                        self.layer.select(feature.id())
                        hayRegistros = True

                ###############################################################################
                ### TOTAL AVES POR AREAS DE DISTRIBUCION
                ###############################################################################
                # desplegar si usuario desea buscar por presencia total de especies amenazadas
                if self.checkbox_distribucion_total_aves.isChecked() & self.checkbox_distribucion_total_aves_amenazadas.isChecked():
                    if (feature["spp_aves_threatened_richness_distribution"] >= int(textedit_distribucion_total_aves_min)) \
                            & (feature["spp_aves_threatened_richness_distribution"] <= int(textedit_distribucion_total_aves_max)):
                        self.layer.select(feature.id())
                        hayRegistros = True
                # por LCVS
                if self.checkbox_distribucion_total_aves.isChecked() & self.checkbox_distribucion_total_aves_amenazadas_lcvs.isChecked():
                    if (feature["spp_aves_lcvs_richness_distribution"] >= int(textedit_distribucion_total_aves_min)) \
                            & (feature["spp_aves_lcvs_richness_distribution"] <= int(textedit_distribucion_total_aves_max)):
                        self.layer.select(feature.id())
                        hayRegistros = True
                # o solamente por presencia
                elif self.checkbox_distribucion_total_aves.isChecked():
                    if (feature["spp_aves_richness_distribution"] >= int(textedit_distribucion_total_aves_min)) \
                            & (feature["spp_aves_richness_distribution"] <= int(textedit_distribucion_total_aves_max)):
                        self.layer.select(feature.id())
                        hayRegistros = True

                ###############################################################################
                ### TOTAL REPTILIA POR AREAS DE DISTRIBUCION
                ###############################################################################
                # desplegar si usuario desea buscar por presencia total de especies amenazadas
                if self.checkbox_distribucion_total_reptilia.isChecked() & self.checkbox_distribucion_total_reptilia_amenazadas.isChecked():
                    if (feature["spp_reptilia_threatened_richness_distribution"] >= int(textedit_distribucion_total_reptilia_min)) \
                            & (feature["spp_reptilia_threatened_richness_distribution"] <= int(textedit_distribucion_total_reptilia_max)):
                        self.layer.select(feature.id())
                        hayRegistros = True
                # por LCVS
                if self.checkbox_distribucion_total_reptilia.isChecked() & self.checkbox_distribucion_total_reptilia_amenazadas_lcvs.isChecked():
                    if (feature["spp_reptilia_lcvs_richness_distribution"] >= int(textedit_distribucion_total_reptilia_min)) \
                            & (feature["spp_reptilia_lcvs_richness_distribution"] <= int(textedit_distribucion_total_reptilia_max)):
                        self.layer.select(feature.id())
                        hayRegistros = True
                # o solamente por presencia
                elif self.checkbox_distribucion_total_reptilia.isChecked():
                    if (feature["spp_reptilia_richness_distribution"] >= int(textedit_distribucion_total_reptilia_min)) \
                            & (feature["spp_reptilia_richness_distribution"] <= int(textedit_distribucion_total_reptilia_max)):
                        self.layer.select(feature.id())
                        hayRegistros = True

                ###############################################################################
                ### TOTAL AMPHIBIA POR AREAS DE DISTRIBUCION
                ###############################################################################
                # desplegar si usuario desea buscar por presencia total de especies amenazadas
                if self.checkbox_distribucion_total_amphibia.isChecked() & self.checkbox_distribucion_total_amphibia_amenazadas.isChecked():
                    if (feature["spp_amphibia_threatened_richness_distribution"] >= int(textedit_distribucion_total_amphibia_min)) \
                            & (feature["spp_amphibia_threatened_richness_distribution"] <= int(textedit_distribucion_total_amphibia_max)):
                        self.layer.select(feature.id())
                        hayRegistros = True
                # por LCVS
                if self.checkbox_distribucion_total_amphibia.isChecked() & self.checkbox_distribucion_total_amphibia_amenazadas_lcvs.isChecked():
                    if (feature["spp_amphibia_lcvs_richness_distribution"] >= int(textedit_distribucion_total_amphibia_min)) \
                            & (feature["spp_amphibia_lcvs_richness_distribution"] <= int(textedit_distribucion_total_amphibia_max)):
                        self.layer.select(feature.id())
                        hayRegistros = True
                # o solamente por presencia
                elif self.checkbox_distribucion_total_amphibia.isChecked():
                    if (feature["spp_amphibia_richness_distribution"] >= int(textedit_distribucion_total_amphibia_min)) \
                            & (feature["spp_amphibia_richness_distribution"] <= int(textedit_distribucion_total_amphibia_max)):
                        self.layer.select(feature.id())
                        hayRegistros = True

                ###############################################################################
                ### TOTAL ARBOLES POR AREAS DE DISTRIBUCION
                ###############################################################################
                # desplegar si usuario desea buscar por presencia total de especies amenazadas
                if self.checkbox_distribucion_total_trees.isChecked() & self.checkbox_distribucion_total_trees_amenazadas.isChecked():
                    if (feature["spp_trees_threatened_richness_distribution"] >= int(textedit_distribucion_total_trees_min)) \
                            & (feature["spp_trees_threatened_richness_distribution"] <= int(textedit_distribucion_total_trees_max)):
                        self.layer.select(feature.id())
                        hayRegistros = True
                # por LCVS
                if self.checkbox_distribucion_total_trees.isChecked() & self.checkbox_distribucion_total_trees_amenazadas_lcvs.isChecked():
                    if (feature["spp_trees_lcvs_richness_distribution"] >= int(textedit_distribucion_total_trees_min)) \
                            & (feature["spp_trees_lcvs_richness_distribution"] <= int(textedit_distribucion_total_trees_max)):
                        self.layer.select(feature.id())
                        hayRegistros = True
                # o solamente por presencia
                elif self.checkbox_distribucion_total_trees.isChecked():
                    if (feature["spp_trees_richness_distribution"] >= int(textedit_distribucion_total_trees_min)) \
                            & (feature["spp_trees_richness_distribution"] <= int(textedit_distribucion_total_trees_max)):
                        self.layer.select(feature.id())
                        hayRegistros = True

            if(not hayRegistros):
                QMessageBox.about(self, 'Alerta!', 'No existen registros dentro de los filtros seleccionados')

    def insertIntoColumnList(self, key):
        try:
            self.columnList.index(key)
        except ValueError:
            self.columnList.append(key)