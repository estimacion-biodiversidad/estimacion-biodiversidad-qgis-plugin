# -*- coding: utf-8 -*-
"""
/***************************************************************************
 IdentifyToolDialog
                                 A QGIS plugin
 tool for clicking on feature
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2018-11-16
        git sha              : $Format:%H$
        copyright            : (C) 2018 by Jose
        email                : doe@doe.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from PyQt5 import uic
from PyQt5 import QtWidgets
from PyQt5.QtGui import QFont
from PyQt5.QtWidgets import QPushButton, QLabel, QHBoxLayout, QDialog, QWidget, QVBoxLayout, QScrollArea,\
    QTableWidget, QTableWidgetItem, QFileDialog

from PyQt5.QtCore import QRect, Qt, QFile

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'identify_tool_dialog_base.ui'))


class IdentifyToolDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(IdentifyToolDialog, self).__init__(parent)
        #self.setupUi(self)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        p = self.palette()
        p.setColor(self.backgroundRole(), Qt.white)
        self.setPalette(p)
        self.resize(1200,700)

        # attributes
        self.filename = None

    def showDialog(self, layer):
        self.layer=layer;

        self.labelHeader = QLabel(self)
        self.labelHeader.setText("Despliegue de estadisticas")
        self.labelHeader.move(20, 20)
        newfont = QFont("Times", 20, QFont.Bold)
        self.labelHeader.setFont(newfont)

        self.buttonDescargar = QPushButton('Descargar estadisticas (CSV)', self)
        self.buttonDescargar.move(20, 590)
        self.buttonDescargar.resize(200, 30)
        self.buttonDescargar.clicked.connect(self.downloadCSV)

        self.tableWidget = QTableWidget(self)
        self.tableWidget.resize(1000, 500)
        self.tableWidget.move(20, 60)


        self.tableWidget.setRowCount(layer.selectedFeatureCount())
        self.tableWidget.setColumnCount(5)

        self.tableWidget.setColumnWidth(0, 100)
        self.tableWidget.setColumnWidth(1, 100)
        self.tableWidget.setColumnWidth(2, 350)
        self.tableWidget.setColumnWidth(3, 100)
        self.tableWidget.setColumnWidth(4, 350)
        self.tableWidget.setHorizontalHeaderItem(0, QTableWidgetItem('Nombre'))
        self.tableWidget.setHorizontalHeaderItem(1, QTableWidgetItem('Riqueza de especies por registros de presencia'))
        self.tableWidget.setHorizontalHeaderItem(2, QTableWidgetItem('Nombre de especies presencia'))
        self.tableWidget.setHorizontalHeaderItem(3, QTableWidgetItem('Riqueza de especies por areas de distribucion'))
        self.tableWidget.setHorizontalHeaderItem(4, QTableWidgetItem('Nombre de especies distribucion'))
        self.tableWidget.setSortingEnabled(True)

        found_features = layer.selectedFeatures()

        cont=0;
        for found_feature in found_features:
            attrs = found_feature.attributes()
            self.tableWidget.setItem(cont, 0, QTableWidgetItem(str(attrs[2])))
            self.tableWidget.setItem(cont, 1, QTableWidgetItem(str(attrs[4])))
            self.tableWidget.setItem(cont, 2, QTableWidgetItem(str(attrs[5])))
            self.tableWidget.setItem(cont, 3, QTableWidgetItem(str(attrs[6])))
            self.tableWidget.setItem(cont, 4, QTableWidgetItem(str(attrs[7])))
            cont=cont+1

        self.show()

    def downloadCSV(self):
        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        fileName, _ = QFileDialog.getSaveFileName(self,"QFileDialog.getSaveFileName()","","CSV Files (*.csv)", options=options)
        if fileName:
            file = open(fileName, 'w')

            found_features = self.layer.selectedFeatures()

            for found_feature in found_features:
                attrs = found_feature.attributes()
                file.write(str(attrs[2]) + '\t')
                file.write(str(attrs[4]) + '\t')
                file.write(str(attrs[5]) + '\t')
                file.write(str(attrs[6]) + '\t')
                file.write(str(attrs[7]) + '\t')
                file.write('\n')

            file.close()