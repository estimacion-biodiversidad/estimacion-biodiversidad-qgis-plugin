# -*- coding: utf-8 -*-
"""
/***************************************************************************
 IdentifyToolDialog
                                 A QGIS plugin
 tool for clicking on feature
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2018-11-16
        git sha              : $Format:%H$
        copyright            : (C) 2018 by Jose
        email                : doe@doe.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from PyQt5 import uic
from PyQt5 import QtWidgets
from PyQt5.QtGui import QFont
from PyQt5.QtWidgets import QPushButton, QLabel, QHBoxLayout, QDialog, QWidget, QVBoxLayout, QScrollArea,\
    QTableWidget, QTableWidgetItem, QFileDialog, QMessageBox, QCheckBox, QLineEdit

from PyQt5.QtCore import QRect, Qt, QFile

from .identify_tool_dialog import IdentifyToolDialog

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'set_columns_dialog_base.ui'))


class SetColumnsDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(SetColumnsDialog, self).__init__(parent)
        #self.setupUi(self)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        p = self.palette()
        p.setColor(self.backgroundRole(), Qt.white)
        self.setPalette(p)
        self.resize(1200,700)

        # attributes
        self.filename = None

    def showDialog(self, layer, columnList):
        self.layer=layer
        self.columnList=columnList

        self.labelHeader = QLabel(self)
        self.labelHeader.setText("Despliegue de estadisticas")
        self.labelHeader.move(20, 20)
        newfont = QFont("Times", 20, QFont.Bold)
        self.labelHeader.setFont(newfont)

        self.buttonDescargar = QPushButton('Cargar Tabla', self)
        self.buttonDescargar.move(20, 590)
        self.buttonDescargar.resize(200, 30)
        self.buttonDescargar.clicked.connect(self.cargarTabla)

        self.buttonCerrar = QPushButton('Cerrar', self)
        self.buttonCerrar.move(220, 590)
        self.buttonCerrar.resize(200, 30)
        self.buttonCerrar.clicked.connect(self.close)

        X = 10
        Y=50

        HEIGHT=30
        WIDTH_LABEL=300
        INCREMENT_Y=20


        self.checkbox_presencia_total_especies = QCheckBox("Riqueza total de especies", self)
        self.checkbox_presencia_total_especies.setGeometry(X,Y,WIDTH_LABEL,HEIGHT)
        Y += INCREMENT_Y
        self.checkbox_presencia_total_especies_amenazadas = QCheckBox("Riqueza total de especies - Amenazadas", self)
        self.checkbox_presencia_total_especies_amenazadas.setGeometry(X, Y, WIDTH_LABEL, HEIGHT)
        Y += INCREMENT_Y


        self.checkbox_presencia_total_mammalia = QCheckBox("Riqueza total de MAMMALIA", self)
        self.checkbox_presencia_total_mammalia.setGeometry(X, Y, WIDTH_LABEL, HEIGHT)
        Y += INCREMENT_Y
        self.checkbox_presencia_total_mammalia_amenazadas = QCheckBox("Riqueza total de MAMMALIA - Amenazadas", self)
        self.checkbox_presencia_total_mammalia_amenazadas.setGeometry(X, Y, WIDTH_LABEL, HEIGHT)
        Y += INCREMENT_Y
        self.checkbox_presencia_total_aves = QCheckBox("Riqueza total de AVES", self)
        self.checkbox_presencia_total_aves.setGeometry(X, Y, WIDTH_LABEL, HEIGHT)
        Y += INCREMENT_Y
        self.checkbox_presencia_total_aves_amenazadas = QCheckBox("Riqueza total de AVES - Amenazadas", self)
        self.checkbox_presencia_total_aves_amenazadas.setGeometry(X, Y, WIDTH_LABEL, HEIGHT)
        Y += INCREMENT_Y
        self.checkbox_presencia_total_reptilia = QCheckBox("Riqueza total de REPTILIA", self)
        self.checkbox_presencia_total_reptilia.setGeometry(X, Y, WIDTH_LABEL, HEIGHT)
        Y += INCREMENT_Y
        self.checkbox_presencia_total_reptilia_amenazadas = QCheckBox("Riqueza total de REPTILIA - Amenazadas", self)
        self.checkbox_presencia_total_reptilia_amenazadas.setGeometry(X, Y, WIDTH_LABEL, HEIGHT)
        Y += INCREMENT_Y
        self.checkbox_presencia_total_amphibia = QCheckBox("Riqueza total de AMPHIBIA", self)
        self.checkbox_presencia_total_amphibia.setGeometry(X, Y, WIDTH_LABEL, HEIGHT)
        Y += INCREMENT_Y
        self.checkbox_presencia_total_amphibia_amenazadas = QCheckBox("Riqueza total de AMPHIBIA - Amenazadas", self)
        self.checkbox_presencia_total_amphibia_amenazadas.setGeometry(X, Y, WIDTH_LABEL, HEIGHT)
        Y += INCREMENT_Y
        self.checkbox_presencia_total_trees = QCheckBox("Riqueza total de ARBOLES", self)
        self.checkbox_presencia_total_trees.setGeometry(X, Y, WIDTH_LABEL, HEIGHT)
        Y += INCREMENT_Y
        self.checkbox_presencia_total_trees_amenazadas = QCheckBox("Riqueza total de ARBOLES - Amenazadas", self)
        self.checkbox_presencia_total_trees_amenazadas.setGeometry(X, Y, WIDTH_LABEL, HEIGHT)
        Y += INCREMENT_Y

        self.checkbox_distribucion_total_especies = QCheckBox("Riqueza total de especies", self)
        self.checkbox_distribucion_total_especies.setGeometry(X, Y, WIDTH_LABEL, HEIGHT)
        Y += INCREMENT_Y
        self.checkbox_distribucion_total_especies_amenazadas = QCheckBox("Riqueza total de especies - Amenazadas", self)
        self.checkbox_distribucion_total_especies_amenazadas.setGeometry(X, Y, WIDTH_LABEL, HEIGHT)
        Y += INCREMENT_Y

        self.checkbox_distribucion_total_mammalia = QCheckBox("Riqueza total de MAMMALIA", self)
        self.checkbox_distribucion_total_mammalia.setGeometry(X, Y, WIDTH_LABEL, HEIGHT)
        Y += INCREMENT_Y
        self.checkbox_distribucion_total_mammalia_amenazadas = QCheckBox("Riqueza total de MAMMALIA - Amenazadas", self)
        self.checkbox_distribucion_total_mammalia_amenazadas.setGeometry(X, Y, WIDTH_LABEL, HEIGHT)
        Y += INCREMENT_Y
        self.checkbox_distribucion_total_aves = QCheckBox("Riqueza total de AVES", self)
        self.checkbox_distribucion_total_aves.setGeometry(X, Y, WIDTH_LABEL, HEIGHT)
        Y += INCREMENT_Y
        self.checkbox_distribucion_total_aves_amenazadas = QCheckBox("Riqueza total de AVES - Amenazadas", self)
        self.checkbox_distribucion_total_aves_amenazadas.setGeometry(X, Y, WIDTH_LABEL, HEIGHT)
        Y += INCREMENT_Y
        self.checkbox_distribucion_total_reptilia = QCheckBox("Riqueza total de REPTILIA", self)
        self.checkbox_distribucion_total_reptilia.setGeometry(X, Y, WIDTH_LABEL, HEIGHT)
        Y += INCREMENT_Y
        self.checkbox_distribucion_total_reptilia_amenazadas = QCheckBox("Riqueza total de REPTILIA - Amenazadas", self)
        self.checkbox_distribucion_total_reptilia_amenazadas.setGeometry(X, Y, WIDTH_LABEL, HEIGHT)
        Y += INCREMENT_Y
        self.checkbox_distribucion_total_amphibia = QCheckBox("Riqueza total de AMPHIBIA", self)
        self.checkbox_distribucion_total_amphibia.setGeometry(X, Y, WIDTH_LABEL, HEIGHT)
        Y += INCREMENT_Y
        self.checkbox_distribucion_total_amphibia_amenazadas = QCheckBox("Riqueza total de AMPHIBIA - Amenazadas", self)
        self.checkbox_distribucion_total_amphibia_amenazadas.setGeometry(X, Y, WIDTH_LABEL, HEIGHT)
        Y += INCREMENT_Y
        self.checkbox_distribucion_total_trees = QCheckBox("Riqueza total de ARBOLES", self)
        self.checkbox_distribucion_total_trees.setGeometry(X, Y, WIDTH_LABEL, HEIGHT)
        Y += INCREMENT_Y
        self.checkbox_distribucion_total_trees_amenazadas = QCheckBox("Riqueza total de ARBOLES - Amenazadas", self)
        self.checkbox_distribucion_total_trees_amenazadas.setGeometry(X, Y, WIDTH_LABEL, HEIGHT)






        self.show()


    def cargarTabla(self):

        self.columnList.clear()

        ###############################################################################
        ### VALIDACIONES
        ###############################################################################
        if self.checkbox_presencia_total_especies.isChecked():
            self.columnList.append("spp_all_richness_occurrence")
            self.columnList.append("spp_all_richness_occurrence_names")
        if self.checkbox_presencia_total_mammalia.isChecked():
            self.columnList.append("spp_mammalia_richness_occurrence")
            self.columnList.append("spp_mammalia_richness_occurrence_names")
        if self.checkbox_presencia_total_aves.isChecked():
            self.columnList.append("spp_aves_richness_occurrence")
            self.columnList.append("spp_aves_richness_occurrence_names")
        if self.checkbox_presencia_total_reptilia.isChecked():
            self.columnList.append("spp_reptilia_richness_occurrence")
            self.columnList.append("spp_reptilia_richness_occurrence_names")
        if self.checkbox_presencia_total_amphibia.isChecked():
            self.columnList.append("spp_amphibia_richness_occurrence")
            self.columnList.append("spp_amphibia_richness_occurrence_names")
        if self.checkbox_presencia_total_trees.isChecked():
            self.columnList.append("spp_trees_richness_occurrence")
            self.columnList.append("spp_trees_richness_occurrence_names")

        if self.checkbox_distribucion_total_especies.isChecked():
            self.columnList.append("spp_all_richness_distribution")
            self.columnList.append("spp_all_richness_distribution_names")
        if self.checkbox_distribucion_total_mammalia.isChecked():
            self.columnList.append("spp_mammalia_richness_distribution")
            self.columnList.append("spp_mammalia_richness_distribution_names")
        if self.checkbox_distribucion_total_aves.isChecked():
            self.columnList.append("spp_aves_richness_distribution")
            self.columnList.append("spp_aves_richness_distribution_names")
        if self.checkbox_distribucion_total_reptilia.isChecked():
            self.columnList.append("spp_reptilia_richness_distribution")
            self.columnList.append("spp_reptilia_richness_distribution_names")
        if self.checkbox_distribucion_total_amphibia.isChecked():
            self.columnList.append("spp_amphibia_richness_distribution")
            self.columnList.append("spp_amphibia_richness_distribution_names")
        if self.checkbox_distribucion_total_trees.isChecked():
            self.columnList.append("spp_trees_richness_distribution")
            self.columnList.append("spp_trees_richness_distribution_names")

        self.dlgIdentificarPoligono = IdentifyToolDialog()
        self.dlgIdentificarPoligono.showDialog(self.layer, self.columnList)
