# -*- coding: utf-8 -*-
"""
/***************************************************************************
 EstimacionBiodiversidad
                                 A QGIS plugin
 Complemento para la estimación de la biodiversidad
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2018-10-28
        git sha              : $Format:%H$
        copyright            : (C) 2018 by CRBio
        email                : mfvargas@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication, Qt
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QAction, QFileDialog, QMessageBox

# Initialize Qt resources from file resources.py
from .resources import *
from qgis.core import *
# Import the code for the dialog
from .estimacion_biodiversidad_dialog import EstimacionBiodiversidadDialog
from .identify_tool_dialog import IdentifyToolDialog
from .specify_dialog import SpecifyDialog
import os.path, sys

from osgeo import ogr

#sys.path.append(r'C:\Code\Python\lib')
#import ogr2ogr

import csv


class EstimacionBiodiversidad:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'EstimacionBiodiversidad_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        # Create the dialog (after translation) and keep reference
        self.dlg = EstimacionBiodiversidadDialog()

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Estimación de la Biodiversidad')
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'EstimacionBiodiversidad')
        self.toolbar.setObjectName(u'EstimacionBiodiversidad')

        self.columnList = list(())
        
        
    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('EstimacionBiodiversidad', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

        
    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/estimacion_biodiversidad/database.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Estimación de la biodiversidad'),
            callback=self.run,
            parent=self.iface.mainWindow())

        self.dlg.pb_initDatabase.clicked.connect(self.initDatabase)     
        self.dlg.pb_connectDatabase.clicked.connect(self.connectDatabase)             
            
        self.dlg.tb_inThematicAreaFile.clicked.connect(self.openInThematicAreaFile)       
        self.dlg.tb_inOccurrenceFile.clicked.connect(self.openInOccurrenceFile)
        self.dlg.tb_inDistributionFile.clicked.connect(self.openInDistributionFile)

        self.dlg.pb_loadInThematicAreaFile.clicked.connect(self.loadInThematicAreaFile)                       
        self.dlg.pb_loadInOccurrenceFile.clicked.connect(self.loadInOccurrenceFile)               
        self.dlg.pb_loadInDistributionFile.clicked.connect(self.loadInDistributionFile)        
        
        self.dlg.pb_calcSppRichnessOccurrence.clicked.connect(self.calcSppRichnessOccurrence)
        self.dlg.pb_calcSppRichnessDistribution.clicked.connect(self.calcSppRichnessDistribution)
       
        # crear el icono en el toolbar para abrir la herramienta de seleccion de features 
        icon_path = ':/plugins/estimacion_biodiversidad/bar-chart.png'
        actionIdentificarPoligono = self.add_action( 
            icon_path, 
            text=self.tr(u'Estadisticas'), 
            callback=self.onClick, 
            parent=self.iface.mainWindow()) 
        self.actionIdentificarPoligono = actionIdentificarPoligono 
        self.actionIdentificarPoligono.setCheckable(True) 
        self.iface.addToolBarIcon(actionIdentificarPoligono)
        
        # Create icon on toolbar for the specify tool
        icon_path = ':/plugins/estimacion_biodiversidad/search.png'
        actionEspecificar = self.add_action(
        icon_path,
        text=self.tr(u'Especificar'),
        callback=self.onClickEspecificar,
        parent=self.iface.mainWindow())
        self.actionEspecificar = actionEspecificar
        self.actionEspecificar.setCheckable(True)
        self.iface.addToolBarIcon(actionEspecificar)        
        
        
    def onClick(self): 
        layer = self.iface.activeLayer() 
        self.dlgIdentificarPoligono = IdentifyToolDialog() 
        self.dlgIdentificarPoligono.showDialog(layer, self.columnList)       


    def onClickEspecificar(self):
        layer = self.iface.activeLayer()
        layer.removeSelection()
        self.columnList.clear()
        self.actionEspecificar = SpecifyDialog()
        self.actionEspecificar.showDialog(layer, self.columnList)

        
    def openInThematicAreaFile(self):
        inThematicAreaFile = str(QFileDialog.getOpenFileName(caption="Abrir shapefile", 
                                                 filter="Shapefiles (*.shp)")[0])       
        self.setInThematicAreaFileLineEdit(inThematicAreaFile)                                                             

        
    def setInThematicAreaFileLineEdit(self, text):
	    self.dlg.le_inThematicAreaFile.setText(text)        

        
    def openInOccurrenceFile(self):
        inOccurrenceFile = str(QFileDialog.getOpenFileName(caption="Abrir TXT", 
                                                 filter="TXT (*.txt)")[0])       
        self.setInOccurrenceFileLineEdit(inOccurrenceFile)                                                             

        
    def setInOccurrenceFileLineEdit(self, text):
	    self.dlg.le_inOccurrenceFile.setText(text)

        
    def openInDistributionFile(self):
        inDistributionFile = str(QFileDialog.getOpenFileName(caption="Abrir SHP", 
                                                 filter="SHP (*.shp)")[0])       
        self.setInDistributionFileLineEdit(inDistributionFile)

        
    def setInDistributionFileLineEdit(self, text):
	    self.dlg.le_inDistributionFile.setText(text)

        
    def setDatabaseInUseLineEdit(self, text):
	    self.dlg.le_databaseInUse.setText(text)
        
        
    def setVariables(self):
        # OGR driver
        self.driverName     = "PostgreSQL"

        # Database connection paramenters
        self.databaseServer = self.dlg.le_databaseServer.text()
        self.databasePort   = self.dlg.le_databasePort.text()
        self.databaseSchema = self.dlg.le_databaseSchema.text()
        self.databaseName   = self.dlg.le_databaseName.text()
        self.databaseUser   = self.dlg.le_databaseUser.text()
        self.databasePW     = self.dlg.le_databasePW.text()
        self.connString     = "PG: host={} port={} active_schema={} dbname={} user={} password={}".format(self.databaseServer, self.databasePort, self.databaseSchema, self.databaseName, self.databaseUser, self.databasePW)
    
        # Data files
        self.inThematicAreaFile    = self.dlg.le_inThematicAreaFile.text()
        self.thematicAreaNameField = self.dlg.le_thematicAreaNameField.text().lower()
        self.layerName             = self.dlg.le_layerName.text()
        
        self.inOccurrenceFile   = self.dlg.le_inOccurrenceFile.text()
        self.inDistributionFile = self.dlg.le_inDistributionFile.text()
        
        
    def initDatabase(self):
        self.setVariables()
        
        # =================
        # Database creation
        # =================
        
        drv = ogr.GetDriverByName(self.driverName)
        if drv is None:
            QgsMessageLog.logMessage("Could not find driver for " + self.driverName, 'EstimacionBiodiversidad', level=Qgis.Info)
            QMessageBox.information(None, "", "Could not find driver for " + self.driverName)
            return
        
        QgsMessageLog.logMessage("Opening " + self.databaseName + " in " + self.databaseServer + "...", 'EstimacionBiodiversidad', level=Qgis.Info)            
        
        dsOut = ogr.Open(self.connString)
        if dsOut is None:
            QgsMessageLog.logMessage("Could not open PostGIS Database " + self.databaseName + " in " + self.databaseServer, 'EstimacionBiodiversidad', level=Qgis.Info)
            QMessageBox.information(None, "", "Could not open PostGIS Database " + self.databaseName + " in " + self.databaseServer)
            return
            
        QgsMessageLog.logMessage("PostGIS database " + self.databaseName + " opened in " + self.databaseServer, 'EstimacionBiodiversidad', level=Qgis.Info)
        
        # ==============
        # Table creation
        # ==============
                
        # "taxon" table creation

        # "layer" table creation
        QgsMessageLog.logMessage("Creating layer table...", 'EstimacionBiodiversidad', level=Qgis.Info)
        query  =  "CREATE TABLE layer ("
        query +=  "layer_id SERIAL PRIMARY KEY,"
        query +=  "name     TEXT"        
        query +=  ")"
        QgsMessageLog.logMessage(query, 'EstimacionBiodiversidad', level=Qgis.Info)        
        dsOut.ExecuteSQL(query)
        QgsMessageLog.logMessage("Text and numbers columns of the layer table have been created", 'EstimacionBiodiversidad', level=Qgis.Info)                
        
        # "thematic_area" table creation
        QgsMessageLog.logMessage("Creating thematic_area table...", 'EstimacionBiodiversidad', level=Qgis.Info)
        query  =  "CREATE TABLE thematic_area ("
        query +=  "thematic_area_id                                    SERIAL PRIMARY KEY,"
        query +=  "layer_id                                            INTEGER REFERENCES layer(layer_id),"        
        query +=  "name                                                TEXT,"
        query +=  "area                                                INTEGER,"
        query +=  "spp_all_richness_occurrence                         INTEGER DEFAULT 0,"
        query +=  "spp_all_richness_occurrence_names                   TEXT,"
        query +=  "spp_all_richness_distribution                       INTEGER DEFAULT 0,"
        query +=  "spp_all_richness_distribution_names                 TEXT,"
        query +=  "spp_mammalia_richness_occurrence                    INTEGER DEFAULT 0,"
        query +=  "spp_mammalia_richness_occurrence_names              TEXT,"
        query +=  "spp_mammalia_richness_distribution                  INTEGER DEFAULT 0,"
        query +=  "spp_mammalia_richness_distribution_names            TEXT,"
        query +=  "spp_aves_richness_occurrence                        INTEGER DEFAULT 0,"
        query +=  "spp_aves_richness_occurrence_names                  TEXT,"
        query +=  "spp_aves_richness_distribution                      INTEGER DEFAULT 0,"
        query +=  "spp_aves_richness_distribution_names                TEXT,"
        query +=  "spp_reptilia_richness_occurrence                    INTEGER DEFAULT 0,"
        query +=  "spp_reptilia_richness_occurrence_names              TEXT,"
        query +=  "spp_reptilia_richness_distribution                  INTEGER DEFAULT 0,"
        query +=  "spp_reptilia_richness_distribution_names            TEXT,"
        query +=  "spp_amphibia_richness_occurrence                    INTEGER DEFAULT 0,"
        query +=  "spp_amphibia_richness_occurrence_names              TEXT,"
        query +=  "spp_amphibia_richness_distribution                  INTEGER DEFAULT 0,"
        query +=  "spp_amphibia_richness_distribution_names            TEXT,"
        query +=  "spp_trees_richness_occurrence                       INTEGER DEFAULT 0,"
        query +=  "spp_trees_richness_occurrence_names                 TEXT,"
        query +=  "spp_trees_richness_distribution                     INTEGER DEFAULT 0,"
        query +=  "spp_trees_richness_distribution_names               TEXT,"
        query +=  "spp_all_threatened_richness_occurrence              INTEGER DEFAULT 0,"
        query +=  "spp_all_threatened_richness_occurrence_names        TEXT,"
        query +=  "spp_all_threatened_richness_distribution            INTEGER DEFAULT 0,"
        query +=  "spp_all_threatened_richness_distribution_names      TEXT,"		
        query +=  "spp_mammalia_threatened_richness_occurrence         INTEGER DEFAULT 0,"
        query +=  "spp_mammalia_threatened_richness_occurrence_names   TEXT,"
        query +=  "spp_mammalia_threatened_richness_distribution       INTEGER DEFAULT 0,"
        query +=  "spp_mammalia_threatened_richness_distribution_names TEXT,"		
        query +=  "spp_aves_threatened_richness_occurrence             INTEGER DEFAULT 0,"
        query +=  "spp_aves_threatened_richness_occurrence_names       TEXT,"
        query +=  "spp_aves_threatened_richness_distribution           INTEGER DEFAULT 0,"
        query +=  "spp_aves_threatened_richness_distribution_names     TEXT,"		
        query +=  "spp_reptilia_threatened_richness_occurrence         INTEGER DEFAULT 0,"
        query +=  "spp_reptilia_threatened_richness_occurrence_names   TEXT,"
        query +=  "spp_reptilia_threatened_richness_distribution       INTEGER DEFAULT 0,"
        query +=  "spp_reptilia_threatened_richness_distribution_names TEXT,"		
        query +=  "spp_amphibia_threatened_richness_occurrence         INTEGER DEFAULT 0,"
        query +=  "spp_amphibia_threatened_richness_occurrence_names   TEXT,"
        query +=  "spp_amphibia_threatened_richness_distribution       INTEGER DEFAULT 0,"
        query +=  "spp_amphibia_threatened_richness_distribution_names TEXT,"		
        query +=  "spp_trees_threatened_richness_occurrence            INTEGER DEFAULT 0,"
        query +=  "spp_trees_threatened_richness_occurrence_names      TEXT,"
        query +=  "spp_trees_threatened_richness_distribution          INTEGER DEFAULT 0,"
        query +=  "spp_trees_threatened_richness_distribution_names    TEXT"	
        query +=  ")"
        QgsMessageLog.logMessage(query, 'EstimacionBiodiversidad', level=Qgis.Info)        
        dsOut.ExecuteSQL(query)
        QgsMessageLog.logMessage("Text and numbers columns of the thematic_area table have been created", 'EstimacionBiodiversidad', level=Qgis.Info)                
        # Spatial columns
        query = "SELECT AddGeometryColumn('public', 'thematic_area', 'geom', 4326, 'MULTIPOLYGON', 2)"
        QgsMessageLog.logMessage(query, 'EstimacionBiodiversidad', level=Qgis.Info)        
        dsOut.ExecuteSQL(query)
        QgsMessageLog.logMessage("Spatial columns of the thematic_area table have been created", 'EstimacionBiodiversidad', level=Qgis.Info)  
        # Spatial index
        QgsMessageLog.logMessage("Creating spatial index on thematic_area...", 'EstimacionBiodiversidad', level=Qgis.Info)                        
        query = "CREATE INDEX idx_thematic_area_geom ON thematic_area USING gist(geom)"
        QgsMessageLog.logMessage(query, 'EstimacionBiodiversidad', level=Qgis.Info)          
        dsOut.ExecuteSQL(query)
        QgsMessageLog.logMessage("Spatial index created!", 'EstimacionBiodiversidad', level=Qgis.Info)        

        # "taxon_occurrence" table creation
        QgsMessageLog.logMessage("Creating taxon_occurrence table...", 'EstimacionBiodiversidad', level=Qgis.Info)
        query  =  "CREATE TABLE taxon_occurrence ("
        query +=  "taxon_occurrence_id INTEGER,"
        query +=  "class_id            INTEGER,"
        query +=  "class_name          TEXT,"		
        query +=  "taxon_id            INTEGER,"
        query +=  "scientific_name     TEXT,"         # this column needs to be removed because it is already defined in the taxon table
        query +=  "iucn_status         CHAR(2)"		
        query +=  ")"
        QgsMessageLog.logMessage(query, 'EstimacionBiodiversidad', level=Qgis.Info)        
        dsOut.ExecuteSQL(query)
        QgsMessageLog.logMessage("Text and numbers columns of the taxon_occurrence table have been created", 'EstimacionBiodiversidad', level=Qgis.Info)    
        # Spatial columns
        query = "SELECT AddGeometryColumn ('public', 'taxon_occurrence', 'geom', 4326, 'POINT', 2)"
        QgsMessageLog.logMessage(query, 'EstimacionBiodiversidad', level=Qgis.Info)        
        dsOut.ExecuteSQL(query)
        QgsMessageLog.logMessage("Spatial columns of the taxon_occurrence table have been created", 'EstimacionBiodiversidad', level=Qgis.Info)
		# Non spatial indexes
        QgsMessageLog.logMessage("Creating non spatial indexes on taxon_occurrence...", 'EstimacionBiodiversidad', level=Qgis.Info)                        
        query = "CREATE INDEX idx_taxon_occurrence_class_id ON taxon_occurrence (class_id)"
        QgsMessageLog.logMessage(query, 'EstimacionBiodiversidad', level=Qgis.Info)          
        dsOut.ExecuteSQL(query)
        query = "CREATE INDEX idx_taxon_occurrence_iucn_status ON taxon_occurrence (iucn_status)"
        QgsMessageLog.logMessage(query, 'EstimacionBiodiversidad', level=Qgis.Info)          
        dsOut.ExecuteSQL(query)
        QgsMessageLog.logMessage("Spatial indexes created!", 'EstimacionBiodiversidad', level=Qgis.Info)        
        # Spatial index
        QgsMessageLog.logMessage("Creating spatial index on taxon_occurrence...", 'EstimacionBiodiversidad', level=Qgis.Info)                        
        query = "CREATE INDEX idx_taxon_occurrence_geom ON taxon_occurrence USING gist(geom)"
        QgsMessageLog.logMessage(query, 'EstimacionBiodiversidad', level=Qgis.Info)          
        dsOut.ExecuteSQL(query)
        QgsMessageLog.logMessage("Spatial index created!", 'EstimacionBiodiversidad', level=Qgis.Info)        
        
        # "taxon_distribution" table creation
        QgsMessageLog.logMessage("Creating taxon_distribution table...", 'EstimacionBiodiversidad', level=Qgis.Info)
        query  =  "CREATE TABLE taxon_distribution ("
        query +=  "taxon_distribution_id INTEGER,"
        query +=  "class_name            TEXT,"		
        query +=  "taxon_id              INTEGER,"
        query +=  "scientific_name       TEXT,"         # this column needs to be removed because it is already defined in the taxon table
        query +=  "iucn_status           CHAR(2)"		        
        query +=  ")"
        QgsMessageLog.logMessage(query, 'EstimacionBiodiversidad', level=Qgis.Info)        
        dsOut.ExecuteSQL(query)
        QgsMessageLog.logMessage("Text and numbers columns of the taxon_distribution table have been created", 'EstimacionBiodiversidad', level=Qgis.Info)                
        # Spatial columns
        query = "SELECT AddGeometryColumn ('public', 'taxon_distribution', 'geom', 4326, 'MULTIPOLYGON', 2)"
        QgsMessageLog.logMessage(query, 'EstimacionBiodiversidad', level=Qgis.Info)        
        dsOut.ExecuteSQL(query)
        QgsMessageLog.logMessage("Spatial columns of the taxon_distribution table have been created", 'EstimacionBiodiversidad', level=Qgis.Info)
		# Non spatial indexes
        QgsMessageLog.logMessage("Creating non spatial indexes on taxon_distribution...", 'EstimacionBiodiversidad', level=Qgis.Info)                        
        query = "CREATE INDEX idx_taxon_distribution_class_name ON taxon_distribution (class_name)"
        QgsMessageLog.logMessage(query, 'EstimacionBiodiversidad', level=Qgis.Info)          
        dsOut.ExecuteSQL(query)
        query = "CREATE INDEX idx_taxon_distribution_iucn_status ON taxon_distribution (iucn_status)"
        QgsMessageLog.logMessage(query, 'EstimacionBiodiversidad', level=Qgis.Info)          
        dsOut.ExecuteSQL(query)
        QgsMessageLog.logMessage("Spatial indexes created!", 'EstimacionBiodiversidad', level=Qgis.Info)        
        # Spatial index
        QgsMessageLog.logMessage("Creating spatial index on taxon_distribution...", 'EstimacionBiodiversidad', level=Qgis.Info)                        
        query = "CREATE INDEX idx_taxon_distribution_geom ON taxon_distribution USING gist(geom)"
        QgsMessageLog.logMessage(query, 'EstimacionBiodiversidad', level=Qgis.Info)          
        dsOut.ExecuteSQL(query)
        QgsMessageLog.logMessage("Spatial index created!", 'EstimacionBiodiversidad', level=Qgis.Info)        
        
        dsOut = None
        QgsMessageLog.logMessage("PostGIS database " + self.databaseName + " initialized in " + self.databaseServer, 'EstimacionBiodiversidad', level=Qgis.Info)        
        QMessageBox.information(None, "", "PostGIS database " + self.databaseName + " initialized in " + self.databaseServer)

        
    def connectDatabase(self):
        self.setVariables()

        # Open database        
        QgsMessageLog.logMessage("Opening " + self.databaseName + " in " + self.databaseServer + "...", 'EstimacionBiodiversidad', level=Qgis.Info)            
        dsOut = ogr.Open(self.connString)
        if dsOut is None:
            QgsMessageLog.logMessage("Could not open PostGIS Database " + self.databaseName + " in " + self.databaseServer, 'EstimacionBiodiversidad', level=Qgis.Info)
            QMessageBox.information(None, "", "Could not open PostGIS Database " + self.databaseName + " in " + self.databaseServer)
        else:
            QgsMessageLog.logMessage("PostGIS database " + self.databaseName + " opened in " + self.databaseServer, 'EstimacionBiodiversidad', level=Qgis.Info)
            QMessageBox.information(None, "", "PostGIS database " + self.databaseName + " opened in " + self.databaseServer)
            # Update le_databaseInUse
            self.setDatabaseInUseLineEdit(self.databaseName)
            
            # Get next "layer_id" value
            query = "SELECT layer_id, name FROM layer;"
            QgsMessageLog.logMessage(query, 'EstimacionBiodiversidad', level=Qgis.Info)
            ly = dsOut.ExecuteSQL(query)
            for feature in ly:
                layerId   = feature.GetField(0)
                layerName = feature.GetField(1)
                QgsMessageLog.logMessage(layerName, 'EstimacionBiodiversidad', level=Qgis.Info)
                # Load "thematic_area" table as a layer
                uri = QgsDataSourceUri()
                uri.setConnection(self.databaseServer, self.databasePort, self.databaseName, self.databaseUser, self.databasePW)
                uri.setDataSource("public", "thematic_area", "geom", "layer_id = " + str(layerId))
                vLayer = QgsVectorLayer(uri.uri(False), layerName, "postgres")
                QgsProject.instance().addMapLayer(vLayer)                
        
        
    def loadInThematicAreaFile(self):
        self.setVariables()

        # Open database        
        QgsMessageLog.logMessage("Opening " + self.databaseName + " in " + self.databaseServer + "...", 'EstimacionBiodiversidad', level=Qgis.Info)            
        dsOut = ogr.Open(self.connString)
        if dsOut is None:
            QgsMessageLog.logMessage("Could not open PostGIS Database " + self.databaseName + " in " + self.databaseServer, 'EstimacionBiodiversidad', level=Qgis.Info)
            QMessageBox.information(None, "", "Could not open PostGIS Database " + self.databaseName + " in " + self.databaseServer)
            return
        QgsMessageLog.logMessage("PostGIS database " + self.databaseName + " opened in " + self.databaseServer, 'EstimacionBiodiversidad', level=Qgis.Info)

        # Open shapefile with thematic areas
        inShapefile  = self.inThematicAreaFile
        driver       = ogr.GetDriverByName("ESRI Shapefile")
        dataSource   = driver.Open(inShapefile, 0)
        inLayer      = dataSource.GetLayer()
        
        # Get next "layer_id" value
        query = "SELECT Count(*) FROM layer;"
        QgsMessageLog.logMessage(query, 'EstimacionBiodiversidad', level=Qgis.Info)
        ly = dsOut.ExecuteSQL(query)
        feat = ly.GetNextFeature()
        layerCount = feat.GetField(0)
        if layerCount == 0:
            # This is because "last_value" of a sequence returns 1 if there are no rows
            layerId = 1
        else:
            query = "SELECT last_value FROM layer_layer_id_seq;"
            QgsMessageLog.logMessage(query, 'EstimacionBiodiversidad', level=Qgis.Info)
            ly = dsOut.ExecuteSQL(query)
            feat = ly.GetNextFeature()
            layerId = feat.GetField(0) + 1
        # QMessageBox.information(None, "", "layerId = " + str(layerId))

        # Insert record into layer table
        query  = "INSERT INTO layer "
        query += "(name) "
        query += "VALUES('{}');".format(self.layerName)
        QgsMessageLog.logMessage(query, 'EstimacionBiodiversidad', level=Qgis.Info)
        dsOut.ExecuteSQL(query)
        
        # QMessageBox.information(None, "", self.thematicAreaNameField)
        # Load thematic area records            
        for feature in inLayer:
            geometry = feature.geometry()
            # if geometry is None or not geometry.IsValid():
            if geometry is None:
                break
            if geometry.GetGeometryType() == ogr.wkbPolygon:
                geometry = ogr.ForceToMultiPolygon(geometry)
            geometryWKT = geometry.ExportToWkt()
            query  = "INSERT INTO thematic_area "
            query += "(layer_id, name, geom) "
            query += "VALUES({}, '{}', ST_GeomFromText('{}', 4326));".format(str(layerId), feature.GetField(self.thematicAreaNameField), geometryWKT)
            QgsMessageLog.logMessage(query, 'EstimacionBiodiversidad', level=Qgis.Info)
            dsOut.ExecuteSQL(query)

        # Fix invalid geometries (see https://www.sigterritoires.fr/index.php/en/how-to-rectify-the-geometry-of-a-postgis-table/)
        # query = "UPDATE thematic_area SET geom = ST_MakeValid(geom) WHERE layer_id = {} AND NOT ST_IsValid(geom);".format(layerId)
        # QgsMessageLog.logMessage(query, 'EstimacionBiodiversidad', level=Qgis.Info)
        # dsOut.ExecuteSQL(query)
        # query = "UPDATE thematic_area SET geom = ST_Multi(ST_Simplify(ST_Multi(ST_CollectionExtract(ST_ForceCollection(ST_MakeValid(geom)),3)),0)) WHERE layer_id = {} AND ST_GeometryType(geom) = 'ST_GeometryCollection';".format(layerId)
        # QgsMessageLog.logMessage(query, 'EstimacionBiodiversidad', level=Qgis.Info)
        # dsOut.ExecuteSQL(query)
        # query = "DELETE FROM thematic_area WHERE layer_id = {} AND geom IS NULL;".format(layerId)
        # QgsMessageLog.logMessage(query, 'EstimacionBiodiversidad', level=Qgis.Info)
        # dsOut.ExecuteSQL(query)
        # query = "UPDATE thematic_area SET geom = ST_Multi(ST_Simplify(the_geom,0)) WHERE layer_id = {};".format(layerId)
        # QgsMessageLog.logMessage(query, 'EstimacionBiodiversidad', level=Qgis.Info)
        # dsOut.ExecuteSQL(query)		
        # query = "UPDATE taxon_occurrence SET geom = ST_Multi(ST_Buffer(geom,0)) WHERE layer_id = {} AND NOT ST_IsValid(geom));".format(layerId)
        # QgsMessageLog.logMessage(query, 'EstimacionBiodiversidad', level=Qgis.Info)
        # dsOut.ExecuteSQL(query)
        
        # Delete invalid geometries
        query = "DELETE FROM thematic_area WHERE layer_id = {} AND NOT ST_IsValid(geom);".format(layerId)
        QgsMessageLog.logMessage(query, 'EstimacionBiodiversidad', level=Qgis.Info)
        dsOut.ExecuteSQL(query)
            
        # Load "thematic_area" table as a layer
        uri = QgsDataSourceUri()
        uri.setConnection(self.databaseServer, self.databasePort, self.databaseName, self.databaseUser, self.databasePW)
        uri.setDataSource("public", "thematic_area", "geom", "layer_id = " + str(layerId))
        vLayer = QgsVectorLayer(uri.uri(False), self.layerName, "postgres")
        QgsProject.instance().addMapLayer(vLayer)

        # vLayer = QgsVectorLayer( "?query=SELECT * FROM thematic_area WHERE layer_id = 1", "PSA_2016", "virtual" )
        # QgsProject.instance().addMapLayer(vLayer)
        
        dsOut = None
        QgsMessageLog.logMessage("Thematic area data loaded!", 'EstimacionBiodiversidad', level=Qgis.Info)        
        QMessageBox.information(None, "", "Thematic area data loaded!")        
        
        
    def loadInOccurrenceFile(self):
        self.setVariables()
        
        # Open database
        QgsMessageLog.logMessage("Opening " + self.databaseName + " in " + self.databaseServer + "...", 'EstimacionBiodiversidad', level=Qgis.Info)            
        dsOut = ogr.Open(self.connString)
        if dsOut is None:
            QgsMessageLog.logMessage("Could not open PostGIS Database " + self.databaseName + " in " + self.databaseServer, 'EstimacionBiodiversidad', level=Qgis.Info)
            QMessageBox.information(None, "", "Could not open PostGIS Database " + self.databaseName + " in " + self.databaseServer)
            return
        QgsMessageLog.logMessage("PostGIS database " + self.databaseName + " opened in " + self.databaseServer, 'EstimacionBiodiversidad', level=Qgis.Info)

        outLayer     = dsOut.GetLayerByName("taxon_occurrence")
        outLayerDefn = outLayer.GetLayerDefn()
        
        with open(self.inOccurrenceFile, encoding="utf8") as f:
            records = csv.reader(f, delimiter='\t')
            
            i = 0
            for record in records:
                # QgsMessageLog.logMessage(str(i) + " " + str(record), 'EstimacionBiodiversidad', level=Qgis.Info)        
                if i == 0: # header
                    QgsMessageLog.logMessage(str(record), 'EstimacionBiodiversidad', level=Qgis.Info)        
                else:
                    # Check if the records is identified at species or subspecies level
                    if record[199] not in ('SPECIES', 'SUBSPECIES'):
                        continue

                    if record[0] is None or record[0] == "":
                        taxonOccurrenceId = -1
                    else:
                        taxonOccurrenceId = int(record[0])
                    if record[223] is None or record[223] == "":
                        taxonClassId = -1
                    else:
                        taxonClassId = int(record[223])
                    taxonClassName = record[192]
                    if record[228] is None or record[228] == "":
                        taxonId = -1
                    else:
                        taxonId = int(record[228])
                    if record[133] is None:
                        longitude = -1
                    else:
                        longitude = float(record[133])
                    if record[132] is None:
                        latitude = -1
                    else:
                        latitude = float(record[132])
                    scientificName = record[229]
                    QgsMessageLog.logMessage(str(taxonOccurrenceId) + " " + str(longitude) + " " + str(latitude), 'EstimacionBiodiversidad', level=Qgis.Info)  

                    # Aproach based on SQL
                    query  = "INSERT INTO taxon_occurrence "
                    query += "(taxon_occurrence_id, class_id, class_name, taxon_id, scientific_name, geom) "
                    query += "VALUES({}, {}, '{}', {}, '{}', ST_GeomFromText('POINT ({} {})', 4326));".format(str(taxonOccurrenceId), str(taxonClassId), taxonClassName, str(taxonId), scientificName, str(longitude), str(latitude))
                    QgsMessageLog.logMessage(query, 'EstimacionBiodiversidad', level=Qgis.Info)
                    dsOut.ExecuteSQL(query)  

                    # Aproach not based on SQL
                    # outFeature   = ogr.Feature(outLayerDefn)                            
                    # outFeature.SetField("taxon_occurrence_id", taxonOccurrenceId)
                    # outFeature.SetField("taxon_id",            taxonId)
                    # outFeature.SetField("scientific_name",     scientificName)
                    # wkt = "POINT({} {})".format(longitude, latitude)
                    # point = ogr.CreateGeometryFromWkt(wkt)
                    # outFeature.SetGeometry(point)
                    # outLayer.CreateFeature(outFeature)
                    
                i = i + 1
                
                if i >= 10000000:
                    break
                    
        dsOut = None
        QgsMessageLog.logMessage("Taxon occurrence layer loaded!", 'EstimacionBiodiversidad', level=Qgis.Info)        
        QMessageBox.information(None, "", "Taxon occurrence layer loaded!")

        
    def loadInDistributionFile(self):
        self.setVariables()
        
        # Open database
        QgsMessageLog.logMessage("Opening " + self.databaseName + " in " + self.databaseServer + "...", 'EstimacionBiodiversidad', level=Qgis.Info)            
        dsOut = ogr.Open(self.connString)
        if dsOut is None:
            QgsMessageLog.logMessage("Could not open PostGIS Database " + self.databaseName + " in " + self.databaseServer, 'EstimacionBiodiversidad', level=Qgis.Info)
            QMessageBox.information(None, "", "Could not open PostGIS Database " + self.databaseName + " in " + self.databaseServer)
            return
        QgsMessageLog.logMessage("PostGIS database " + self.databaseName + " opened in " + self.databaseServer, 'EstimacionBiodiversidad', level=Qgis.Info)

        outLayer     = dsOut.GetLayerByName("taxon_distribution")
        outLayerDefn = outLayer.GetLayerDefn()
        
        inShapefile  = self.inDistributionFile
        driver       = ogr.GetDriverByName("ESRI Shapefile")
        dataSource   = driver.Open(inShapefile, 0)
        inLayer      = dataSource.GetLayer()
            
        i = 0
        for feature in inLayer:
            QgsMessageLog.logMessage(str(i), 'EstimacionBiodiversidad', level=Qgis.Info)        

            # Aproach based on SQL
            geometry    = feature.geometry()
            if geometry.GetGeometryType() == ogr.wkbPolygon:
                geometry = ogr.ForceToMultiPolygon(geometry)
            geometryWKT = geometry.ExportToWkt()
            query =  "INSERT INTO taxon_distribution "
            query += "(taxon_distribution_id, taxon_id, class_name, scientific_name, geom) "
            query += "VALUES({}, {}, '{}', '{}', ST_GeomFromText('{}', 4326));".format(1, 1, str(feature.GetField("class")).capitalize(), str(feature.GetField("sciname")), geometryWKT)            
            QgsMessageLog.logMessage(query, 'EstimacionBiodiversidad', level=Qgis.Info)
            dsOut.ExecuteSQL(query)  

            # Aproach not based on SQL
            # outFeature   = ogr.Feature(outLayerDefn)                            
            # outFeature.SetField("taxon_occurrence_id", 1)
            # outFeature.SetField("taxon_id",            1)
            # outFeature.SetField("scientific_name",     "Homo sapiens")
            # wkt = "POINT({} {})".format(record[133], record[132])
            # point = ogr.CreateGeometryFromWkt(wkt)
            # outFeature.SetGeometry(point)
            # outLayer.CreateFeature(outFeature)
                
            i = i + 1
            if i >= 10000:
                break
                    
        dsOut = None
        QgsMessageLog.logMessage("Taxon distribution layer loaded!", 'EstimacionBiodiversidad', level=Qgis.Info)        
        QMessageBox.information(None, "", "Taxon distribution layer loaded!")        
        
        
    def calcSppRichnessOccurrence(self):
        self.setVariables()
        
        # Open database
        QgsMessageLog.logMessage("Opening " + self.databaseName + " in " + self.databaseServer + "...", 'EstimacionBiodiversidad', level=Qgis.Info)            
        dsOut = ogr.Open(self.connString)
        if dsOut is None:
            QgsMessageLog.logMessage("Could not open PostGIS Database " + self.databaseName + " in " + self.databaseServer, 'EstimacionBiodiversidad', level=Qgis.Info)
            QMessageBox.information(None, "", "Could not open PostGIS Database " + self.databaseName + " in " + self.databaseServer)
            return
        QgsMessageLog.logMessage("PostGIS database " + self.databaseName + " opened in " + self.databaseServer, 'EstimacionBiodiversidad', level=Qgis.Info)
    
        # ALL SPECIES
	    # All groups
        # Species richness calculation
        QgsMessageLog.logMessage("Calculating all species richness based on occurrence records...", 'EstimacionBiodiversidad', level=Qgis.Info)
        query  =  "UPDATE thematic_area"
        query +=  "    SET spp_all_richness_occurrence = ("
        query +=  "        SELECT Count(DISTINCT taxon_id)"        
        query +=  "        FROM taxon_occurrence o"
        query +=  "        WHERE ST_Contains(thematic_area.geom, o.geom)"        
        query +=  "    )"                
        QgsMessageLog.logMessage(query, 'EstimacionBiodiversidad', level=Qgis.Info)
        dsOut.ExecuteSQL(query)

        # Species occurrences names
        QgsMessageLog.logMessage("Generating all species names from occurrences...", 'EstimacionBiodiversidad', level=Qgis.Info)
        query  =  "UPDATE thematic_area"
        query +=  "    SET spp_all_richness_occurrence_names = ("
        query +=  "        SELECT String_agg(DISTINCT scientific_name, ',')"        
        query +=  "        FROM taxon_occurrence o"
        query +=  "        WHERE ST_Contains(thematic_area.geom, o.geom)"        
        query +=  "    )"                
        QgsMessageLog.logMessage(query, 'EstimacionBiodiversidad', level=Qgis.Info)
        dsOut.ExecuteSQL(query)    

	    # Mammalia species
        # Species richness calculation
        QgsMessageLog.logMessage("Calculating mammalia species richness based on occurrence records...", 'EstimacionBiodiversidad', level=Qgis.Info)
        query  =  "UPDATE thematic_area"
        query +=  "    SET spp_mammalia_richness_occurrence = ("
        query +=  "        SELECT Count(DISTINCT taxon_id)"        
        query +=  "        FROM taxon_occurrence o"
        query +=  "        WHERE class_id = 359 AND ST_Contains(thematic_area.geom, o.geom)"        
        query +=  "    )"                
        QgsMessageLog.logMessage(query, 'EstimacionBiodiversidad', level=Qgis.Info)
        dsOut.ExecuteSQL(query)

        # Species occurrences names
        QgsMessageLog.logMessage("Generating mammalia species names from occurrences...", 'EstimacionBiodiversidad', level=Qgis.Info)
        query  =  "UPDATE thematic_area"
        query +=  "    SET spp_mammalia_richness_occurrence_names = ("
        query +=  "        SELECT String_agg(DISTINCT scientific_name, ',')"        
        query +=  "        FROM taxon_occurrence o"
        query +=  "        WHERE class_id = 359 AND ST_Contains(thematic_area.geom, o.geom)"        
        query +=  "    )"                
        QgsMessageLog.logMessage(query, 'EstimacionBiodiversidad', level=Qgis.Info)
        dsOut.ExecuteSQL(query)     		

	    # Aves species
        # Species richness calculation
        QgsMessageLog.logMessage("Calculating aves species richness based on occurrence records...", 'EstimacionBiodiversidad', level=Qgis.Info)
        query  =  "UPDATE thematic_area"
        query +=  "    SET spp_aves_richness_occurrence = ("
        query +=  "        SELECT Count(DISTINCT taxon_id)"        
        query +=  "        FROM taxon_occurrence o"
        query +=  "        WHERE class_id = 44 AND ST_Contains(thematic_area.geom, o.geom)"        
        query +=  "    )"                
        QgsMessageLog.logMessage(query, 'EstimacionBiodiversidad', level=Qgis.Info)
        dsOut.ExecuteSQL(query)

        # Species occurrences names
        QgsMessageLog.logMessage("Generating aves species names from occurrences...", 'EstimacionBiodiversidad', level=Qgis.Info)
        query  =  "UPDATE thematic_area"
        query +=  "    SET spp_aves_richness_occurrence_names = ("
        query +=  "        SELECT String_agg(DISTINCT scientific_name, ',')"        
        query +=  "        FROM taxon_occurrence o"
        query +=  "        WHERE class_id = 44 AND ST_Contains(thematic_area.geom, o.geom)"        
        query +=  "    )"                
        QgsMessageLog.logMessage(query, 'EstimacionBiodiversidad', level=Qgis.Info)
        dsOut.ExecuteSQL(query)     		

	    # Reptilia species
        # Species richness calculation
        QgsMessageLog.logMessage("Calculating mammalia species richness based on occurrence records...", 'EstimacionBiodiversidad', level=Qgis.Info)
        query  =  "UPDATE thematic_area"
        query +=  "    SET spp_reptilia_richness_occurrence = ("
        query +=  "        SELECT Count(DISTINCT taxon_id)"        
        query +=  "        FROM taxon_occurrence o"
        query +=  "        WHERE class_id = 358 AND ST_Contains(thematic_area.geom, o.geom)"        
        query +=  "    )"                
        QgsMessageLog.logMessage(query, 'EstimacionBiodiversidad', level=Qgis.Info)
        dsOut.ExecuteSQL(query)

        # Species occurrences names
        QgsMessageLog.logMessage("Generating mammalia species names from occurrences...", 'EstimacionBiodiversidad', level=Qgis.Info)
        query  =  "UPDATE thematic_area"
        query +=  "    SET spp_reptilia_richness_occurrence_names = ("
        query +=  "        SELECT String_agg(DISTINCT scientific_name, ',')"        
        query +=  "        FROM taxon_occurrence o"
        query +=  "        WHERE class_id = 358 AND ST_Contains(thematic_area.geom, o.geom)"        
        query +=  "    )"                
        QgsMessageLog.logMessage(query, 'EstimacionBiodiversidad', level=Qgis.Info)
        dsOut.ExecuteSQL(query)     		

	    # Amphibia species
        # Species richness calculation
        QgsMessageLog.logMessage("Calculating mammalia species richness based on occurrence records...", 'EstimacionBiodiversidad', level=Qgis.Info)
        query  =  "UPDATE thematic_area"
        query +=  "    SET spp_amphibia_richness_occurrence = ("
        query +=  "        SELECT Count(DISTINCT taxon_id)"        
        query +=  "        FROM taxon_occurrence o"
        query +=  "        WHERE class_id = 131 AND ST_Contains(thematic_area.geom, o.geom)"        
        query +=  "    )"                
        QgsMessageLog.logMessage(query, 'EstimacionBiodiversidad', level=Qgis.Info)
        dsOut.ExecuteSQL(query)

        # Species occurrences names
        QgsMessageLog.logMessage("Generating mammalia species names from occurrences...", 'EstimacionBiodiversidad', level=Qgis.Info)
        query  =  "UPDATE thematic_area"
        query +=  "    SET spp_amphibia_richness_occurrence_names = ("
        query +=  "        SELECT String_agg(DISTINCT scientific_name, ',')"        
        query +=  "        FROM taxon_occurrence o"
        query +=  "        WHERE class_id = 131 AND ST_Contains(thematic_area.geom, o.geom)"        
        query +=  "    )"                
        QgsMessageLog.logMessage(query, 'EstimacionBiodiversidad', level=Qgis.Info)
        dsOut.ExecuteSQL(query)     		
        
        # THREATENED SPECIES
	    # All groups
        # Species richness calculation
        QgsMessageLog.logMessage("Calculating all species richness based on occurrence records...", 'EstimacionBiodiversidad', level=Qgis.Info)
        query  =  "UPDATE thematic_area"
        query +=  "    SET spp_all_threatened_richness_occurrence = ("
        query +=  "        SELECT Count(DISTINCT taxon_id)"        
        query +=  "        FROM taxon_occurrence o"
        query +=  "        WHERE iucn_status IN ('VU', 'EN', 'CR') AND ST_Contains(thematic_area.geom, o.geom)"        
        query +=  "    )"                
        QgsMessageLog.logMessage(query, 'EstimacionBiodiversidad', level=Qgis.Info)
        dsOut.ExecuteSQL(query)

        # Species occurrences names
        QgsMessageLog.logMessage("Generating all species names from occurrences...", 'EstimacionBiodiversidad', level=Qgis.Info)
        query  =  "UPDATE thematic_area"
        query +=  "    SET spp_all_threatened_richness_occurrence_names = ("
        query +=  "        SELECT String_agg(DISTINCT scientific_name, ',')"        
        query +=  "        FROM taxon_occurrence o"
        query +=  "        WHERE iucn_status IN ('VU', 'EN', 'CR') AND ST_Contains(thematic_area.geom, o.geom)"        
        query +=  "    )"                
        QgsMessageLog.logMessage(query, 'EstimacionBiodiversidad', level=Qgis.Info)
        dsOut.ExecuteSQL(query)    

	    # Mammalia species
        # Species richness calculation
        QgsMessageLog.logMessage("Calculating mammalia species richness based on occurrence records...", 'EstimacionBiodiversidad', level=Qgis.Info)
        query  =  "UPDATE thematic_area"
        query +=  "    SET spp_mammalia_threatened_richness_occurrence = ("
        query +=  "        SELECT Count(DISTINCT taxon_id)"        
        query +=  "        FROM taxon_occurrence o"
        query +=  "        WHERE class_id = 359 AND iucn_status IN ('VU', 'EN', 'CR') AND ST_Contains(thematic_area.geom, o.geom)"        
        query +=  "    )"                
        QgsMessageLog.logMessage(query, 'EstimacionBiodiversidad', level=Qgis.Info)
        dsOut.ExecuteSQL(query)

        # Species occurrences names
        QgsMessageLog.logMessage("Generating mammalia species names from occurrences...", 'EstimacionBiodiversidad', level=Qgis.Info)
        query  =  "UPDATE thematic_area"
        query +=  "    SET spp_mammalia_threatened_richness_occurrence_names = ("
        query +=  "        SELECT String_agg(DISTINCT scientific_name, ',')"        
        query +=  "        FROM taxon_occurrence o"
        query +=  "        WHERE class_id = 359 AND iucn_status IN ('VU', 'EN', 'CR') AND ST_Contains(thematic_area.geom, o.geom)"        
        query +=  "    )"                
        QgsMessageLog.logMessage(query, 'EstimacionBiodiversidad', level=Qgis.Info)
        dsOut.ExecuteSQL(query)     		

	    # Aves species
        # Species richness calculation
        QgsMessageLog.logMessage("Calculating aves species richness based on occurrence records...", 'EstimacionBiodiversidad', level=Qgis.Info)
        query  =  "UPDATE thematic_area"
        query +=  "    SET spp_aves_threatened_richness_occurrence = ("
        query +=  "        SELECT Count(DISTINCT taxon_id)"        
        query +=  "        FROM taxon_occurrence o"
        query +=  "        WHERE class_id = 44 AND iucn_status IN ('VU', 'EN', 'CR') AND ST_Contains(thematic_area.geom, o.geom)"        
        query +=  "    )"                
        QgsMessageLog.logMessage(query, 'EstimacionBiodiversidad', level=Qgis.Info)
        dsOut.ExecuteSQL(query)

        # Species occurrences names
        QgsMessageLog.logMessage("Generating aves species names from occurrences...", 'EstimacionBiodiversidad', level=Qgis.Info)
        query  =  "UPDATE thematic_area"
        query +=  "    SET spp_aves_threatened_richness_occurrence_names = ("
        query +=  "        SELECT String_agg(DISTINCT scientific_name, ',')"        
        query +=  "        FROM taxon_occurrence o"
        query +=  "        WHERE class_id = 44 AND iucn_status IN ('VU', 'EN', 'CR') AND ST_Contains(thematic_area.geom, o.geom)"        
        query +=  "    )"                
        QgsMessageLog.logMessage(query, 'EstimacionBiodiversidad', level=Qgis.Info)
        dsOut.ExecuteSQL(query)     		

	    # Reptilia species
        # Species richness calculation
        QgsMessageLog.logMessage("Calculating mammalia species richness based on occurrence records...", 'EstimacionBiodiversidad', level=Qgis.Info)
        query  =  "UPDATE thematic_area"
        query +=  "    SET spp_reptilia_threatened_richness_occurrence = ("
        query +=  "        SELECT Count(DISTINCT taxon_id)"        
        query +=  "        FROM taxon_occurrence o"
        query +=  "        WHERE class_id = 358 AND iucn_status IN ('VU', 'EN', 'CR') AND ST_Contains(thematic_area.geom, o.geom)"        
        query +=  "    )"                
        QgsMessageLog.logMessage(query, 'EstimacionBiodiversidad', level=Qgis.Info)
        dsOut.ExecuteSQL(query)

        # Species occurrences names
        QgsMessageLog.logMessage("Generating mammalia species names from occurrences...", 'EstimacionBiodiversidad', level=Qgis.Info)
        query  =  "UPDATE thematic_area"
        query +=  "    SET spp_reptilia_threatened_richness_occurrence_names = ("
        query +=  "        SELECT String_agg(DISTINCT scientific_name, ',')"        
        query +=  "        FROM taxon_occurrence o"
        query +=  "        WHERE class_id = 358 AND iucn_status IN ('VU', 'EN', 'CR') AND ST_Contains(thematic_area.geom, o.geom)"        
        query +=  "    )"                
        QgsMessageLog.logMessage(query, 'EstimacionBiodiversidad', level=Qgis.Info)
        dsOut.ExecuteSQL(query)     		

	    # Amphibia species
        # Species richness calculation
        QgsMessageLog.logMessage("Calculating mammalia species richness based on occurrence records...", 'EstimacionBiodiversidad', level=Qgis.Info)
        query  =  "UPDATE thematic_area"
        query +=  "    SET spp_amphibia_threatened_richness_occurrence = ("
        query +=  "        SELECT Count(DISTINCT taxon_id)"        
        query +=  "        FROM taxon_occurrence o"
        query +=  "        WHERE class_id = 131 AND iucn_status IN ('VU', 'EN', 'CR') AND ST_Contains(thematic_area.geom, o.geom)"        
        query +=  "    )"                
        QgsMessageLog.logMessage(query, 'EstimacionBiodiversidad', level=Qgis.Info)
        dsOut.ExecuteSQL(query)

        # Species occurrences names
        QgsMessageLog.logMessage("Generating mammalia species names from occurrences...", 'EstimacionBiodiversidad', level=Qgis.Info)
        query  =  "UPDATE thematic_area"
        query +=  "    SET spp_amphibia_threatened_richness_occurrence_names = ("
        query +=  "        SELECT String_agg(DISTINCT scientific_name, ',')"        
        query +=  "        FROM taxon_occurrence o"
        query +=  "        WHERE class_id = 131 AND iucn_status IN ('VU', 'EN', 'CR') AND ST_Contains(thematic_area.geom, o.geom)"        
        query +=  "    )"                
        QgsMessageLog.logMessage(query, 'EstimacionBiodiversidad', level=Qgis.Info)
        dsOut.ExecuteSQL(query)             
        
        dsOut = None
        QgsMessageLog.logMessage("Species richness based on occurrence records has been calculated!", 'EstimacionBiodiversidad', level=Qgis.Info)        
        QMessageBox.information(None, "", "Species richness based on occurrence records has been calculated!")          
        
        
    def calcSppRichnessDistribution(self):
        self.setVariables()
        
        # Open database
        QgsMessageLog.logMessage("Opening " + self.databaseName + " in " + self.databaseServer + "...", 'EstimacionBiodiversidad', level=Qgis.Info)            
        dsOut = ogr.Open(self.connString)
        if dsOut is None:
            QgsMessageLog.logMessage("Could not open PostGIS Database " + self.databaseName + " in " + self.databaseServer, 'EstimacionBiodiversidad', level=Qgis.Info)
            QMessageBox.information(None, "", "Could not open PostGIS Database " + self.databaseName + " in " + self.databaseServer)
            return
        QgsMessageLog.logMessage("PostGIS database " + self.databaseName + " opened in " + self.databaseServer, 'EstimacionBiodiversidad', level=Qgis.Info)
    
        # ALL SPECIES
	    # All groups
        # Species richness calculation
        QgsMessageLog.logMessage("Calculating all species richness based on distribution areas...", 'EstimacionBiodiversidad', level=Qgis.Info)
        query  =  "UPDATE thematic_area"
        query +=  "    SET spp_all_richness_distribution = ("
        query +=  "        SELECT Count(DISTINCT scientific_name)"        
        query +=  "        FROM taxon_distribution d"
        query +=  "        WHERE ST_Intersects(thematic_area.geom, d.geom)"        
        query +=  "    )"                
        QgsMessageLog.logMessage(query, 'EstimacionBiodiversidad', level=Qgis.Info)
        dsOut.ExecuteSQL(query)

        # Species occurrences names
        QgsMessageLog.logMessage("Generating all species names from distribution areas...", 'EstimacionBiodiversidad', level=Qgis.Info)
        query  =  "UPDATE thematic_area"
        query +=  "    SET spp_all_richness_distribution_names = ("
        query +=  "        SELECT String_agg(DISTINCT scientific_name, ',')"        
        query +=  "        FROM taxon_distribution d"
        query +=  "        WHERE ST_Intersects(thematic_area.geom, d.geom)"        
        query +=  "    )"                
        QgsMessageLog.logMessage(query, 'EstimacionBiodiversidad', level=Qgis.Info)
        dsOut.ExecuteSQL(query)     

	    # Mammalia species
        # Species richness calculation
        QgsMessageLog.logMessage("Calculating mammalia species richness based on distribution areas...", 'EstimacionBiodiversidad', level=Qgis.Info)
        query  =  "UPDATE thematic_area"
        query +=  "    SET spp_mammalia_richness_distribution = ("
        query +=  "        SELECT Count(DISTINCT scientific_name)"        
        query +=  "        FROM taxon_distribution d"
        query +=  "        WHERE class_name = 'Mammalia' AND ST_Intersects(thematic_area.geom, d.geom)"        
        query +=  "    )"                
        QgsMessageLog.logMessage(query, 'EstimacionBiodiversidad', level=Qgis.Info)
        dsOut.ExecuteSQL(query)

        # Species occurrences names
        QgsMessageLog.logMessage("Generating mammalia species names from distribution areas...", 'EstimacionBiodiversidad', level=Qgis.Info)
        query  =  "UPDATE thematic_area"
        query +=  "    SET spp_mammalia_richness_distribution_names = ("
        query +=  "        SELECT String_agg(DISTINCT scientific_name, ',')"        
        query +=  "        FROM taxon_distribution d"
        query +=  "        WHERE class_name = 'Mammalia' AND ST_Intersects(thematic_area.geom, d.geom)"        
        query +=  "    )"                
        QgsMessageLog.logMessage(query, 'EstimacionBiodiversidad', level=Qgis.Info)
        dsOut.ExecuteSQL(query)     

	    # Aves species
        # Species richness calculation
        QgsMessageLog.logMessage("Calculating aves species richness based on distribution areas...", 'EstimacionBiodiversidad', level=Qgis.Info)
        query  =  "UPDATE thematic_area"
        query +=  "    SET spp_aves_richness_distribution = ("
        query +=  "        SELECT Count(DISTINCT scientific_name)"        
        query +=  "        FROM taxon_distribution d"
        query +=  "        WHERE class_name = 'Aves' AND ST_Intersects(thematic_area.geom, d.geom)"        
        query +=  "    )"                
        QgsMessageLog.logMessage(query, 'EstimacionBiodiversidad', level=Qgis.Info)
        dsOut.ExecuteSQL(query)

        # Species occurrences names
        QgsMessageLog.logMessage("Generating aves species names from distribution areas...", 'EstimacionBiodiversidad', level=Qgis.Info)
        query  =  "UPDATE thematic_area"
        query +=  "    SET spp_aves_richness_distribution_names = ("
        query +=  "        SELECT String_agg(DISTINCT scientific_name, ',')"        
        query +=  "        FROM taxon_distribution d"
        query +=  "        WHERE class_name = 'Aves' AND ST_Intersects(thematic_area.geom, d.geom)"        
        query +=  "    )"                
        QgsMessageLog.logMessage(query, 'EstimacionBiodiversidad', level=Qgis.Info)
        dsOut.ExecuteSQL(query)     
		
	    # Reptilia species
        # Species richness calculation
        QgsMessageLog.logMessage("Calculating reptilia species richness based on distribution areas...", 'EstimacionBiodiversidad', level=Qgis.Info)
        query  =  "UPDATE thematic_area"
        query +=  "    SET spp_reptilia_richness_distribution = ("
        query +=  "        SELECT Count(DISTINCT scientific_name)"        
        query +=  "        FROM taxon_distribution d"
        query +=  "        WHERE class_name = 'Reptilia' AND ST_Intersects(thematic_area.geom, d.geom)"        
        query +=  "    )"                
        QgsMessageLog.logMessage(query, 'EstimacionBiodiversidad', level=Qgis.Info)
        dsOut.ExecuteSQL(query)

        # Species occurrences names
        QgsMessageLog.logMessage("Generating reptilia species names from distribution areas...", 'EstimacionBiodiversidad', level=Qgis.Info)
        query  =  "UPDATE thematic_area"
        query +=  "    SET spp_reptilia_richness_distribution_names = ("
        query +=  "        SELECT String_agg(DISTINCT scientific_name, ',')"        
        query +=  "        FROM taxon_distribution d"
        query +=  "        WHERE class_name = 'Reptilia' AND ST_Intersects(thematic_area.geom, d.geom)"        
        query +=  "    )"                
        QgsMessageLog.logMessage(query, 'EstimacionBiodiversidad', level=Qgis.Info)
        dsOut.ExecuteSQL(query)     

	    # Amphibia species
        # Species richness calculation
        QgsMessageLog.logMessage("Calculating amphibia species richness based on distribution areas...", 'EstimacionBiodiversidad', level=Qgis.Info)
        query  =  "UPDATE thematic_area"
        query +=  "    SET spp_amphibia_richness_distribution = ("
        query +=  "        SELECT Count(DISTINCT scientific_name)"        
        query +=  "        FROM taxon_distribution d"
        query +=  "        WHERE class_name = 'Amphibia' AND ST_Intersects(thematic_area.geom, d.geom)"        
        query +=  "    )"                
        QgsMessageLog.logMessage(query, 'EstimacionBiodiversidad', level=Qgis.Info)
        dsOut.ExecuteSQL(query)

        # Species occurrences names
        QgsMessageLog.logMessage("Generating amphibia species names from distribution areas...", 'EstimacionBiodiversidad', level=Qgis.Info)
        query  =  "UPDATE thematic_area"
        query +=  "    SET spp_amphibia_richness_distribution_names = ("
        query +=  "        SELECT String_agg(DISTINCT scientific_name, ',')"        
        query +=  "        FROM taxon_distribution d"
        query +=  "        WHERE class_name = 'Amphibia' AND ST_Intersects(thematic_area.geom, d.geom)"        
        query +=  "    )"                
        QgsMessageLog.logMessage(query, 'EstimacionBiodiversidad', level=Qgis.Info)
        dsOut.ExecuteSQL(query)     
		
        # THREATENED SPECIES
	    # All groups
        # Species richness calculation
        QgsMessageLog.logMessage("Calculating all species richness based on distribution areas...", 'EstimacionBiodiversidad', level=Qgis.Info)
        query  =  "UPDATE thematic_area"
        query +=  "    SET spp_all_threatened_richness_distribution = ("
        query +=  "        SELECT Count(DISTINCT scientific_name)"        
        query +=  "        FROM taxon_distribution d"
        query +=  "        WHERE iucn_status IN ('VU', 'EN', 'CR') AND ST_Intersects(thematic_area.geom, d.geom)"        
        query +=  "    )"                
        QgsMessageLog.logMessage(query, 'EstimacionBiodiversidad', level=Qgis.Info)
        dsOut.ExecuteSQL(query)

        # Species occurrences names
        QgsMessageLog.logMessage("Generating all species names from distribution areas...", 'EstimacionBiodiversidad', level=Qgis.Info)
        query  =  "UPDATE thematic_area"
        query +=  "    SET spp_all_threatened_richness_distribution_names = ("
        query +=  "        SELECT String_agg(DISTINCT scientific_name, ',')"        
        query +=  "        FROM taxon_distribution d"
        query +=  "        WHERE iucn_status IN ('VU', 'EN', 'CR') AND ST_Intersects(thematic_area.geom, d.geom)"        
        query +=  "    )"                
        QgsMessageLog.logMessage(query, 'EstimacionBiodiversidad', level=Qgis.Info)
        dsOut.ExecuteSQL(query)     

	    # Mammalia species
        # Species richness calculation
        QgsMessageLog.logMessage("Calculating mammalia species richness based on distribution areas...", 'EstimacionBiodiversidad', level=Qgis.Info)
        query  =  "UPDATE thematic_area"
        query +=  "    SET spp_mammalia_threatened_richness_distribution = ("
        query +=  "        SELECT Count(DISTINCT scientific_name)"        
        query +=  "        FROM taxon_distribution d"
        query +=  "        WHERE class_name = 'Mammalia' AND iucn_status IN ('VU', 'EN', 'CR') AND ST_Intersects(thematic_area.geom, d.geom)"        
        query +=  "    )"                
        QgsMessageLog.logMessage(query, 'EstimacionBiodiversidad', level=Qgis.Info)
        dsOut.ExecuteSQL(query)

        # Species occurrences names
        QgsMessageLog.logMessage("Generating mammalia species names from distribution areas...", 'EstimacionBiodiversidad', level=Qgis.Info)
        query  =  "UPDATE thematic_area"
        query +=  "    SET spp_mammalia_threatened_richness_distribution_names = ("
        query +=  "        SELECT String_agg(DISTINCT scientific_name, ',')"        
        query +=  "        FROM taxon_distribution d"
        query +=  "        WHERE class_name = 'Mammalia' AND iucn_status IN ('VU', 'EN', 'CR') AND ST_Intersects(thematic_area.geom, d.geom)"        
        query +=  "    )"                
        QgsMessageLog.logMessage(query, 'EstimacionBiodiversidad', level=Qgis.Info)
        dsOut.ExecuteSQL(query)     

	    # Aves species
        # Species richness calculation
        QgsMessageLog.logMessage("Calculating aves species richness based on distribution areas...", 'EstimacionBiodiversidad', level=Qgis.Info)
        query  =  "UPDATE thematic_area"
        query +=  "    SET spp_aves_threatened_richness_distribution = ("
        query +=  "        SELECT Count(DISTINCT scientific_name)"        
        query +=  "        FROM taxon_distribution d"
        query +=  "        WHERE class_name = 'Aves' AND iucn_status IN ('VU', 'EN', 'CR') AND ST_Intersects(thematic_area.geom, d.geom)"        
        query +=  "    )"                
        QgsMessageLog.logMessage(query, 'EstimacionBiodiversidad', level=Qgis.Info)
        dsOut.ExecuteSQL(query)

        # Species occurrences names
        QgsMessageLog.logMessage("Generating aves species names from distribution areas...", 'EstimacionBiodiversidad', level=Qgis.Info)
        query  =  "UPDATE thematic_area"
        query +=  "    SET spp_aves_threatened_richness_distribution_names = ("
        query +=  "        SELECT String_agg(DISTINCT scientific_name, ',')"        
        query +=  "        FROM taxon_distribution d"
        query +=  "        WHERE class_name = 'Aves' AND iucn_status IN ('VU', 'EN', 'CR') AND ST_Intersects(thematic_area.geom, d.geom)"        
        query +=  "    )"                
        QgsMessageLog.logMessage(query, 'EstimacionBiodiversidad', level=Qgis.Info)
        dsOut.ExecuteSQL(query)     
		
	    # Reptilia species
        # Species richness calculation
        QgsMessageLog.logMessage("Calculating reptilia species richness based on distribution areas...", 'EstimacionBiodiversidad', level=Qgis.Info)
        query  =  "UPDATE thematic_area"
        query +=  "    SET spp_reptilia_threatened_richness_distribution = ("
        query +=  "        SELECT Count(DISTINCT scientific_name)"        
        query +=  "        FROM taxon_distribution d"
        query +=  "        WHERE class_name = 'Reptilia' AND iucn_status IN ('VU', 'EN', 'CR') AND ST_Intersects(thematic_area.geom, d.geom)"        
        query +=  "    )"                
        QgsMessageLog.logMessage(query, 'EstimacionBiodiversidad', level=Qgis.Info)
        dsOut.ExecuteSQL(query)

        # Species occurrences names
        QgsMessageLog.logMessage("Generating reptilia species names from distribution areas...", 'EstimacionBiodiversidad', level=Qgis.Info)
        query  =  "UPDATE thematic_area"
        query +=  "    SET spp_reptilia_threatened_richness_distribution_names = ("
        query +=  "        SELECT String_agg(DISTINCT scientific_name, ',')"        
        query +=  "        FROM taxon_distribution d"
        query +=  "        WHERE class_name = 'Reptilia' AND iucn_status IN ('VU', 'EN', 'CR') AND ST_Intersects(thematic_area.geom, d.geom)"        
        query +=  "    )"                
        QgsMessageLog.logMessage(query, 'EstimacionBiodiversidad', level=Qgis.Info)
        dsOut.ExecuteSQL(query)     

	    # Amphibia species
        # Species richness calculation
        QgsMessageLog.logMessage("Calculating amphibia species richness based on distribution areas...", 'EstimacionBiodiversidad', level=Qgis.Info)
        query  =  "UPDATE thematic_area"
        query +=  "    SET spp_amphibia_threatened_richness_distribution = ("
        query +=  "        SELECT Count(DISTINCT scientific_name)"        
        query +=  "        FROM taxon_distribution d"
        query +=  "        WHERE class_name = 'Amphibia' AND iucn_status IN ('VU', 'EN', 'CR') AND ST_Intersects(thematic_area.geom, d.geom)"        
        query +=  "    )"                
        QgsMessageLog.logMessage(query, 'EstimacionBiodiversidad', level=Qgis.Info)
        dsOut.ExecuteSQL(query)

        # Species occurrences names
        QgsMessageLog.logMessage("Generating amphibia species names from distribution areas...", 'EstimacionBiodiversidad', level=Qgis.Info)
        query  =  "UPDATE thematic_area"
        query +=  "    SET spp_amphibia_threatened_richness_distribution_names = ("
        query +=  "        SELECT String_agg(DISTINCT scientific_name, ',')"        
        query +=  "        FROM taxon_distribution d"
        query +=  "        WHERE class_name = 'Amphibia' AND iucn_status IN ('VU', 'EN', 'CR') AND ST_Intersects(thematic_area.geom, d.geom)"        
        query +=  "    )"                
        QgsMessageLog.logMessage(query, 'EstimacionBiodiversidad', level=Qgis.Info)
        dsOut.ExecuteSQL(query)     
		
        dsOut = None
        QgsMessageLog.logMessage("Species richness based on distribution areas has been calculated!", 'EstimacionBiodiversidad', level=Qgis.Info)        
        QMessageBox.information(None, "", "Species richness based on distribution areas has been calculated!")                  
        
        
    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Estimación de la Biodiversidad'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar


    def run(self):
        """Run method that performs all the real work"""
        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            self.setVariables()
            self.initDatabase()
